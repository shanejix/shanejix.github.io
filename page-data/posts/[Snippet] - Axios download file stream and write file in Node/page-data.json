{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/[Snippet] - Axios download file stream and write file in Node/","result":{"data":{"site":{"siteMetadata":{"title":"shanejix","description":"learner && coder"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9dd4013c-c308-552c-bd2c-04f0cd996599","timeToRead":5}},{"node":{"id":"d29bf37d-75f0-501e-92b1-42c06cdbcd7b","timeToRead":3}},{"node":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","timeToRead":9}},{"node":{"id":"cb3a4052-202e-5a46-bf15-4e9b30e34ebf","timeToRead":3}},{"node":{"id":"45c6b07a-fc6a-5800-9907-86a94c1f4ace","timeToRead":2}},{"node":{"id":"db38bc53-9935-56f0-a9e2-0be373990d78","timeToRead":3}},{"node":{"id":"1dcfd849-d044-5c73-b31a-5fd30393f430","timeToRead":14}},{"node":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","timeToRead":15}},{"node":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","timeToRead":12}},{"node":{"id":"ba521381-a518-5686-a682-0ada55a7dd73","timeToRead":4}},{"node":{"id":"ba58ecad-907f-5ad2-bc26-9167d7607dcc","timeToRead":12}},{"node":{"id":"08b71346-abf3-5649-84f5-2f8ae4f48c6a","timeToRead":3}},{"node":{"id":"da55e002-3a8a-5af2-929e-4de7e3a8d314","timeToRead":4}},{"node":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","timeToRead":2}},{"node":{"id":"af002700-632d-547f-82b9-f31919d4f03e","timeToRead":1}},{"node":{"id":"7b6d671f-8de2-5511-91e9-0797db813dc7","timeToRead":1}},{"node":{"id":"ad4fad45-b734-560c-8324-a9708e1e04c4","timeToRead":1}},{"node":{"id":"ef84ef13-dac8-5cfa-ac69-d0ea44f677f1","timeToRead":2}},{"node":{"id":"69026b7f-ca1c-5eea-8f61-76972396800c","timeToRead":2}},{"node":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","timeToRead":8}},{"node":{"id":"14bde951-d8e7-5045-84f7-dd9479cfafc3","timeToRead":35}},{"node":{"id":"aa4d72c6-d675-52e4-a55b-b07237ed0e1a","timeToRead":2}},{"node":{"id":"eb631c0f-69a5-5ca8-b3c7-1baaed014eea","timeToRead":1}},{"node":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","timeToRead":18}},{"node":{"id":"a40d34f8-b202-5f5b-8c33-19c7c163bbce","timeToRead":5}},{"node":{"id":"afc44728-7e4f-5ce3-bf62-373400a8a46a","timeToRead":12}},{"node":{"id":"ca3cc4cf-0ddf-5fb3-a58d-2354b2f0a10e","timeToRead":5}},{"node":{"id":"fe7fd5be-04af-5d1a-b969-f8f4de7db655","timeToRead":1}},{"node":{"id":"fb3bc99d-cf2f-5fbd-981d-1d701815f87b","timeToRead":66}},{"node":{"id":"4de1fb79-73c7-5593-adc3-427351c465e9","timeToRead":101}},{"node":{"id":"9a102758-e412-5f31-8753-54534e8fdb15","timeToRead":1}},{"node":{"id":"a07217e5-4cbe-54e4-9566-2a0df732a1a4","timeToRead":1}},{"node":{"id":"c8a73065-3214-5616-93f3-0df2a119e91d","timeToRead":1}}]},"markdownRemark":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","excerpt":"同步链接: https://www.shanejix.com/posts/[Snippet] - Axios download file stream and write file in Node/ enhance: enhance: usage: 作者：shanejix\n出处：https://www.shanejix…","html":"<blockquote>\n<p>同步链接: <a href=\"https://www.shanejix.com/posts/%5BSnippet%5D%20-%20Axios%20download%20file%20stream%20and%20write%20file%20in%20Node/\">https://www.shanejix.com/posts/[Snippet] - Axios download file stream and write file in Node/</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs-extra\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span>\n  url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n      responseType<span class=\"token operator\">:</span> <span class=\"token string\">\"stream\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// simply use response.data.pipe and fs.createWriteStream to pipe response to file</span>\n        response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// fix bug:  file may be not has been downloaded entirely</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>enhance:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs-extra'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create stream writer</span>\n  <span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n    responseType<span class=\"token operator\">:</span> <span class=\"token string\">'stream'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ensure that the user can call `then()` only when the file has been downloaded entirely.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n      response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      writer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        error <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      writer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>enhance:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> stream <span class=\"token keyword\">from</span> <span class=\"token string\">\"stream\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"util\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> finished <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span>\n  url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// creat stream writer</span>\n  <span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> <span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>outputLocationPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n    responseType<span class=\"token operator\">:</span> <span class=\"token string\">\"stream\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return a Promise</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">finished</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span>fileUrl<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./xx.xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>作者：<a href=\"https://www.shanejix.com/\">shanejix</a>\n出处：<a href=\"https://www.shanejix.com/posts/%5BSnippet%5D%20-%20Axios%20download%20file%20stream%20and%20write%20file%20in%20Node/\">https://www.shanejix.com/posts/[Snippet] - Axios download file stream and write file in Node/</a>\n版权：本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">「署名-非商业性使用-相同方式共享 4.0 国际」</a>许可协议进行许可。\n声明：转载请注明出处！</p>\n</blockquote>","frontmatter":{"title":"[Snippet] - Axios download file stream and write file in Node","date":"January 10, 2022","update":"April 12, 2022","url":"https://github.com/shanejix/shanejix.github.io/issues/88"}}},"pageContext":{"slug":"/[Snippet] - Axios download file stream and write file in Node/","previous":{"fields":{"slug":"/[Snippet] - JavaScript Sleep/"},"frontmatter":{"title":"[Snippet] - JavaScript Sleep","tags":["JavaScript","Snippet"]}},"next":{"fields":{"slug":"/小米手机欧版MIUI通用卡刷教程/"},"frontmatter":{"title":"小米手机欧版MIUI通用卡刷教程","tags":["Other"]}}}},"staticQueryHashes":["3159585216","63159454"]}