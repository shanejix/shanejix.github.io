{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/如何使用 JavaScript 实现二叉树，二叉平衡树和红黑树/","result":{"data":{"site":{"siteMetadata":{"title":"shanejix","description":"learner && coder"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9dd4013c-c308-552c-bd2c-04f0cd996599","timeToRead":5}},{"node":{"id":"d29bf37d-75f0-501e-92b1-42c06cdbcd7b","timeToRead":3}},{"node":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","timeToRead":9}},{"node":{"id":"cb3a4052-202e-5a46-bf15-4e9b30e34ebf","timeToRead":3}},{"node":{"id":"45c6b07a-fc6a-5800-9907-86a94c1f4ace","timeToRead":2}},{"node":{"id":"db38bc53-9935-56f0-a9e2-0be373990d78","timeToRead":3}},{"node":{"id":"1dcfd849-d044-5c73-b31a-5fd30393f430","timeToRead":14}},{"node":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","timeToRead":15}},{"node":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","timeToRead":12}},{"node":{"id":"ba521381-a518-5686-a682-0ada55a7dd73","timeToRead":4}},{"node":{"id":"ba58ecad-907f-5ad2-bc26-9167d7607dcc","timeToRead":12}},{"node":{"id":"08b71346-abf3-5649-84f5-2f8ae4f48c6a","timeToRead":3}},{"node":{"id":"da55e002-3a8a-5af2-929e-4de7e3a8d314","timeToRead":4}},{"node":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","timeToRead":2}},{"node":{"id":"af002700-632d-547f-82b9-f31919d4f03e","timeToRead":1}},{"node":{"id":"7b6d671f-8de2-5511-91e9-0797db813dc7","timeToRead":1}},{"node":{"id":"ad4fad45-b734-560c-8324-a9708e1e04c4","timeToRead":1}},{"node":{"id":"ef84ef13-dac8-5cfa-ac69-d0ea44f677f1","timeToRead":2}},{"node":{"id":"69026b7f-ca1c-5eea-8f61-76972396800c","timeToRead":2}},{"node":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","timeToRead":8}},{"node":{"id":"14bde951-d8e7-5045-84f7-dd9479cfafc3","timeToRead":35}},{"node":{"id":"aa4d72c6-d675-52e4-a55b-b07237ed0e1a","timeToRead":2}},{"node":{"id":"eb631c0f-69a5-5ca8-b3c7-1baaed014eea","timeToRead":1}},{"node":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","timeToRead":18}},{"node":{"id":"a40d34f8-b202-5f5b-8c33-19c7c163bbce","timeToRead":5}},{"node":{"id":"afc44728-7e4f-5ce3-bf62-373400a8a46a","timeToRead":12}},{"node":{"id":"ca3cc4cf-0ddf-5fb3-a58d-2354b2f0a10e","timeToRead":5}},{"node":{"id":"fe7fd5be-04af-5d1a-b969-f8f4de7db655","timeToRead":1}},{"node":{"id":"fb3bc99d-cf2f-5fbd-981d-1d701815f87b","timeToRead":66}},{"node":{"id":"4de1fb79-73c7-5593-adc3-427351c465e9","timeToRead":101}},{"node":{"id":"9a102758-e412-5f31-8753-54534e8fdb15","timeToRead":1}},{"node":{"id":"a07217e5-4cbe-54e4-9566-2a0df732a1a4","timeToRead":1}},{"node":{"id":"c8a73065-3214-5616-93f3-0df2a119e91d","timeToRead":1}}]},"markdownRemark":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","excerpt":"同步链接: https://www.shanejix.com/posts/如何使用 JavaScript 实现二叉树，二叉平衡树和红黑树/ 此文仅记录学习树相关的知识以及实现逻辑和代码片段。包含二叉树，二叉查找树，平衡二叉查找树（AVL 树，红黑树），均已 es…","html":"<blockquote>\n<p>同步链接: <a href=\"https://www.shanejix.com/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20JavaScript%20%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8C%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/\">https://www.shanejix.com/posts/如何使用 JavaScript 实现二叉树，二叉平衡树和红黑树/</a></p>\n</blockquote>\n<p>此文仅记录学习树相关的知识以及实现逻辑和代码片段。包含二叉树，二叉查找树，平衡二叉查找树（AVL 树，红黑树），均已 es6 语法实现。查阅前默认你已经具备树相关的的基本概念，如果对某个部分感兴趣建议直接跳转到相应部分，have fun！</p>\n<p>（图太难画了，有空补，逃 ~）</p>\n<p>所有完整代码：<a href=\"https://github.com/shanejix/algorithm-and-data-structure/tree/master/src/data-structures/06-binary-tree\">Code</a></p>\n<hr>\n<h2>树的基本概念</h2>\n<p>一图胜千言，下图是一棵多叉树：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shanejix/images/How%20To%20Use%20Javascript%20To%20Implement%20A%20Binary%20Search%20Tree%20And%20More-tree%20feature.jpg#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=FrO2h&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<p>树的概念类似生活中树的树根，一生二，二…，这样子。类比月现实中的树根不会错综交织成<strong>网状</strong>，树的概念也一样。如果树的分叉相互连结，那就脱离树的范畴。如下列举后续会用到的一些概念：</p>\n<p><strong>节点，度</strong> ：一个实心圆就是一个节点，向下分叉的个数就是节点的度（degree）。黑色节点表示了节点节点间的层次关系，树的旋转等操作会用到这些关系，比较重要。节点按度的个数又可以分为，叶子节点（度为 0），非叶子节点（度不为零），当然一个节点的度就是该节点的一颗子树。</p>\n<p><strong>深度，高度，层数</strong>：这三个概念比较容易混淆，放在一起类比。深度，类比于树根从地表向下衍生的深度。高度，类比于楼房的地表绝对高度或者山峰的海拔高度。可能你也发现了，首先有一个参考标准，相对于谁的高度或深度。所以一般会计算整棵树的高度（深度），或者某个节点的高度（深度）。然后，就是计数的规则，一般情况，高度，深度都是从 0 开始计数，层次从 1 开始计数。但是，也有从层次从 0 计数，高度，深度从 1 计数的时候。</p>\n<h2>二叉树</h2>\n<p>各种二叉树：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/shanejix/images/How%20To%20Use%20Javascript%20To%20Implement%20A%20Binary%20Search%20Tree%20And%20More-binary%20tree.jpg#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=vSPGU&#x26;originHeight=1080&#x26;originWidth=1920&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<p><strong>二叉树的特点</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">最大度为2 ：各个节点的度最大为2，最多有两颗子树</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">有序树：左右子树严格有顺，即使左子树，右子树为空</code></pre></div>\n<p><strong>二叉树的性质</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">非空二叉树的第 k（k>=1) 层最多有 2^(k-1) 个节点</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">在高为 h（h>=1)的二叉树中最多有 2^h -1 个节点</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">非空二叉树中，如果度为零的节点个数为 n0 ，度为 1 的节点个数为 n1 ，度为 2 的节点个数为 n2 ，则：n0 = n2 + 1</code></pre></div>\n<h3>常见二叉树</h3>\n<p>真二叉树(full binary tree)：所有节点的度都为 0 或 2</p>\n<p>满二叉树(perfect binary tree)：最后一层节点的度都为 0，其他节点的度都为 2</p>\n<p>完全二叉树(complete binary tree)：根节点到倒数第二层，是满二叉树，最后一层的叶子节点<strong>靠左</strong>对齐</p>\n<p><strong>完全二叉树的性质</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">度为1的节点只有左子树，并且要么为1要么为0</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">节点相同的二叉树，完全二叉树的高度最小</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">假设完全二叉树高度为 h (h>=1),那么至少有 2^（h -1） 个节点，至多有 2^h - 1 个节点；\n\n若总结点数为 n , 则 2^(h-1) &lt; n &lt; 2^h - 1</code></pre></div>\n<h3>二叉树的遍历</h3>\n<p>访问二叉树中的各个节点，一般是左右子树的访问顺序是先左子树，然后右子树；当然也可以先右子树后左子树，但是这就不是不是我们所熟知的前中后序遍历了。</p>\n<p><strong>前序遍历</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">遍历当前节点 -> 遍历当前节点的左子树 -> 遍历当前的节点的右子树</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">preorderTraversal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> printer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  printer <span class=\"token operator\">?</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>中序遍历</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">遍历当前节点的左子树 -> 遍历当前节点 -> 遍历当前的节点的右子树</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">inorderTraversal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> printer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  printer <span class=\"token operator\">?</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>后续遍历</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">遍历当前节点的左子树 -> 遍历当前的节点的右子树 -> 遍历当前节点</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">postorderTraversal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> printer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  printer <span class=\"token operator\">?</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>层次遍历</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">从上到下，从坐到右，按层依次遍历二叉树</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">levelOrderTraversal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> printer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currNode <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    printer <span class=\"token operator\">?</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">printer</span><span class=\"token punctuation\">(</span>currNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>二叉树搜索树</h2>\n<p>二叉搜索树，又名二叉排序树，二叉查找树，故名思意可以极大的提高查找效率</p>\n<p>特征：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">任意一个节点的值，都大于左子树中所有节点的值，都小于右子树中所有节点的值\n\n二叉搜索树中节点存储的值必须具备可比较性</code></pre></div>\n<h3>实现二叉搜索树</h3>\n<p><strong>接口设计：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTreeNode</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BinaryTreeNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param {*} value\n   * @param {function} compareFunction\n   * @return {*}\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> compareFunction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> compareFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compareFunction <span class=\"token operator\">=</span> compareFunction<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {*} value\n   * @return {boolean}\n   */</span>\n  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {*} value\n   * @return {boolean | Error}\n   */</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {*} value\n   * @return {boolean}\n   */</span>\n  <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @return {BinarySearchTreeNode}\n   */</span>\n  <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>允许传入自定义的比较器</p>\n<p><strong>插入：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 树为空，插入root节点\n\n- 树为不为空，找到父节点，插入父节点的左边 or 右边</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} value\n * @return {BinarySearchTreeNode}\n */</span>\n<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// curr.node.value === null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeValueComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// curr.node.value &lt; value</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeValueComparator<span class=\"token punctuation\">.</span><span class=\"token function\">lessThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// curr.node !== null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// curr.node.right === null</span>\n    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compareFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// curr.node.value > value</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeValueComparator<span class=\"token punctuation\">.</span><span class=\"token function\">greaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// curr.node.left !== null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// curr.node.left === null</span>\n    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compareFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// curr.node.value === value</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>删除：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 删除的是叶子节点\n\n    -> 找到父节点，将父节点的左子树 or 右子树 设为null\n\n    -> 如果没有父节点，则是根节点，将root设置为null\n\n- 删除的是度为1的节点\n\n    -> 找到父节点，用子树替代当前位置\n\n    -> 如果没有父节点，则是根节点，将root指向子树\n\n- 删除的是度为2的节点\n\n    -> 找到父节点，找到前驱或者后继节点，替代当前节点，然后删除前驱或后继\n\n    -> 如果没有父节点，则是根节点，特殊处理\n\n- 以上删除的节点可能是根节点</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} value\n * @return {boolean | Error}\n */</span>\n<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodeToRemove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeToRemove<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item not exit in this tree'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> nodeToRemove<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// degree === 0 node is a leaf and has no child</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeToRemove<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>nodeToRemove<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      nodeToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// degree === 2 has tew children</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeToRemove<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextBiggerNode <span class=\"token operator\">=</span> nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>nextBiggerNode<span class=\"token punctuation\">,</span> nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>nextBiggerNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nodeToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>nextBiggerNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      nodeToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nodeToRemove<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// degree === 1 has only one child</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> childNode <span class=\"token operator\">=</span> nodeToRemove<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> nodeToRemove<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parent<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>nodeToRemove<span class=\"token punctuation\">,</span> childNode<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// childNode.parent = parent</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      BinaryTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">coypNode</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">,</span> nodeToRemove<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  nodeToRemove<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">前驱或后继是指中序遍历中当前节点的前一个或后一个节点</code></pre></div>\n<p>其他接口相对容易，不再概述</p>\n<h2>平衡二叉搜索树</h2>\n<p>二叉搜索树在极端情况下添加和删除会退化为链表。</p>\n<p>如何平衡二叉搜索树呢？只有在添加或删除后想办法降低树的高度。</p>\n<p>下面一起看看 AVL 树和红黑树是如何实现的。</p>\n<h2>AVL 树</h2>\n<p><strong>引入平衡因子（balance factor）</strong> ：某个节点的左右子树的高度差</p>\n<p>特点：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">每个节点的平衡因子只能是：1 0 -1；绝对值超过1则失衡</code></pre></div>\n<h3>实现 AVL 树</h3>\n<p><strong>接口设计：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AvlTree</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param {*} value\n   */</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {*} value\n   */</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {BinarySearchTreeNode} node\n   */</span>\n  <span class=\"token function\">balance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {BinarySearchTreeNode} rootNode\n   */</span>\n  <span class=\"token function\">rotateLeftLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {BinarySearchTreeNode} rootNode\n   */</span>\n  <span class=\"token function\">rotateLeftRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {BinarySearchTreeNode} rootNode\n   */</span>\n  <span class=\"token function\">rotateRightRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * @param {BinarySearchTreeNode} rootNode\n   */</span>\n  <span class=\"token function\">rotateRightLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>添加：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 当前节点不会失衡，父节点，祖先节点可能会失衡\n\n- 失衡会像上逐级传播</code></pre></div>\n<p><code class=\"language-text\">insert</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} value\n */</span>\n<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// BinarySearchTree.insert</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// move up from current node to root to check balance factors</span>\n  <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>平衡</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">通过平衡因子判断节点插入位置的情况</code></pre></div>\n<p><code class=\"language-text\">balance</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {BinarySearchTreeNode} node\n */</span>\n<span class=\"token function\">balance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// balance factor is not ok</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>balanceFactor <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// left rotate</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>balanceFactor <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// left-left rotate</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateLeftLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>balanceFactor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// left-right rotate</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateLeftRight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>balanceFactor <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// right rotate</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>balanceFactor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right-right rotate</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateRightRight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>balanceFactor <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right-left rotate</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateRightLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">通过层次和有序判断节点插入位置的情况</code></pre></div>\n<p><code class=\"language-text\">balance2</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} grand\n * @returns {*}\n */</span>\n<span class=\"token function\">balance2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> grand<span class=\"token punctuation\">.</span><span class=\"token function\">tallerChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">tallerChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// left</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// left-left</span>\n      <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// left-right</span>\n      <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// right</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">isRightChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right-right</span>\n      <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right-left</span>\n      <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">通过层次和有序判断节点插入位置，4种情况统一处理</code></pre></div>\n<p><code class=\"language-text\">balance3</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} grand\n * @returns {*}\n */</span>\n<span class=\"token function\">balance3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> grand<span class=\"token punctuation\">.</span><span class=\"token function\">tallerChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">tallerChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// left</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// left-left</span>\n      <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// left-right</span>\n      <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// right</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">isRightChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right-right</span>\n      <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">,</span> grand<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right-left</span>\n      <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>grand<span class=\"token punctuation\">,</span> grand<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>left-left-右旋-单旋</strong>\n<img src=\"https://cdn.jsdelivr.net/gh/shanejix/images/How%20To%20Use%20Javascript%20To%20Implement%20A%20Binary%20Search%20Tree%20And%20More-ll.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=LpKrY&#x26;originHeight=1152&#x26;originWidth=2048&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. grandparent.left = parent.right\n\n2. parent.parent = grandparent.parent\n\n3. parent.right = grandparent\n\n- 第1步和第2步可以交换</code></pre></div>\n<p><code class=\"language-text\">rotateLeftLeft</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n  * @param {BinarySearchTreeNode} rootNode\n  */</span>\n<span class=\"token function\">rotateLeftLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> leftNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  leftNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>left-right-左旋-右旋-双旋</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.先对parent节点左旋,变化为rotateLeftLeft情形\n\n2.处理rotateLeftLeft情形</code></pre></div>\n<p><code class=\"language-text\">rotateLeftRight</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n *\n * @param {BinarySearchTreeNode} rootNode\n */</span>\n<span class=\"token function\">rotateLeftRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> leftNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> leftRightNode <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n  leftNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftRightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    leftNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>leftRightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    leftRightNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>leftRightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  leftRightNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateLeftLeft</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>right-right-左旋-单旋</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. grandparent.right = parent.left\n\n2. parent.parent = grandparent.parent\n\n3. parent.left = grandparent\n\n- 第1步和第2步可以交换</code></pre></div>\n<p><code class=\"language-text\">rotateRightRight</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {BinarySearchTreeNode} rootNode\n */</span>\n<span class=\"token function\">rotateRightRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rightNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  rightNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>right-left-右旋-左旋-双旋</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.先对parent节点右旋,变化为rotateRightRight情形\n\n2.处理rotateRightRight情形</code></pre></div>\n<p><code class=\"language-text\">rotateRightLeft</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {BinarySearchTreeNode} rootNode\n */</span>\n<span class=\"token function\">rotateRightLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rightNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> rightLeftNode <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  rightNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightLeftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rightNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>rightLeftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    rightLeftNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rightLeftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  rightLeftNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateRightRight</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>左旋</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 和retateLeftLeft情况一致\n\n1. grandparent.left = parent.right\n\n2. parent.parent = grandparent.parent\n\n3. parent.right = grandparent\n\n- 第1步和第2步可以交换</code></pre></div>\n<p><code class=\"language-text\">rotateLeft</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} rootNode\n */</span>\n<span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rightNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  rightNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>右旋</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 和rotateRightRight情况一直\n\n1. grandparent.right = parent.left\n\n2. parent.parent = grandparent.parent\n\n3. parent.left = grandparent\n\n- 第1步和第2步可以交换</code></pre></div>\n<p><code class=\"language-text\">rotateRight</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} rootNode\n */</span>\n<span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> leftNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootNode <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  leftNode<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>统一处理</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} r\n * @param {*} a\n * @param {*} b\n * @param {*} c\n * @param {*} d\n * @param {*} e\n * @param {*} f\n */</span>\n<span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// d</span>\n  d<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    r<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">isRightChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    r<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//b-c</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// e-f</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// b-d-f</span>\n  d<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  d<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">旋转：\n\n  - 必定有旋转中心，右旋顺时针旋转，左旋逆时针旋转\n\n  - 旋转中心的节点上升，绕中心旋转的节点下沉\n\n引用的维护:\n\n  - grandparent的父节点更新为parent节点的父节点\n\n  - 右旋必定有节点成为旋转中心的右子树\n\n  - 左旋必定有节点成为旋转中心的左子树\n\n  - 注意判空</code></pre></div>\n<p><strong>删除：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">删除可能导致父节点或者祖先节点失衡，只有一个节点失衡</code></pre></div>\n<p><code class=\"language-text\">remove</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} value\n */</span>\n<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// BinarySearchTree.remove</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">balance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>B 树</h2>\n<p>一种多路搜索树</p>\n<p>特点：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 一个节点，可以存储超过2个元素，可以超过连个节点\n\n- 具有二叉搜索树的性质\n\n- 平衡</code></pre></div>\n<p><strong>m 阶 B 树的性质</strong></p>\n<p>m 阶：节点的度最大为 m</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 1 &lt;= 根节点的元素个数 &lt;= m-1\n\n- ceil(m/2) - 1 &lt;= 非根节点的元素个数 &lt;= m-1\n\n- 子树（度）的个数 = 节点元素个数 + 1\n\n  - 2 &lt;= 根节点子树的个数 &lt;= m\n\n  - ceil(m/2) &lt;= 非根节点子树的个数 &lt;= m</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- B树和二叉搜索树在逻辑上是等价的\n\n- 多代（层级）节点合并就可以得到一个B树节点，反之，B树节点也可以分解\n\n  - 2代二叉搜索树合并的节点，最多具有4个子树（4阶B树）\n\n  - 3代二叉搜索树合并的节点，最多具有8个子树（8阶B树）\n\n  - n代二叉搜索树合并的节点，最多具有2^n个子树（2^n阶B树）</code></pre></div>\n<p>B 树的具备二叉搜索树的性质，类似二分搜索的意思</p>\n<p><strong>添加</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 1.B树中查找将要添加的位置，必定是叶子节点\n\n- 2.添加可能导致当前叶子节点的元素个数 等于 B树的阶树 m 导致 上溢\n\n- 3.解决上溢：\n\n  - 假设上溢节点为中间的某个节点k\n\n  - 将k元素和父节点合并，并且将[0,k)和(k,m-1]位置的元素分裂为2个子节点\n\n  - 向上合并肯可能导致父节点上溢，进而传播到根节点 -> 高度+1</code></pre></div>\n<p><strong>删除</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 1.叶子节点,直接删除。元素个数低于最低限制 ceil(m/2) - 1 ,可能导致 下溢\n\n  -下溢解决：\n\n    - 此时节点元素个数必定等于ceil(m/2) - 2\n\n    - 如果相邻兄弟节点有至少ceil(m/2)个元素，可以借一个元素 => 右旋\n\n      - 兄弟节点的一个元素上升到父节点，父节点的一个元素下沉到当前节点\n\n    - 如果相邻兄弟节点只有ceil(m/2) - 1个元素，则合并\n\n      - 将父节点的元素挪下来和左右子树合并\n\n      - 合并后的元素个数 = ceil(m/2) - 1 + ceil(m/2) - 2 + 1 = 2ceil(m/2) - 2 &lt; m - 1\n\n      - 向下合并可能导致父节点下溢，进而传播到根节点 -> 高度 - 1\n\n- 2.非叶子节点，找到前驱或后继，替换待删除的元素，然后再删掉前驱或后继节点\n\n  - 非叶子节点的前驱或后继必定在叶子节点中\n\n  - 所以，删除的节点始终是叶子节点，同叶子节点的删除</code></pre></div>\n<p><strong>4 阶 B 树</strong></p>\n<p>后续的红黑树就等价于 4 阶 B 树（2，3，4 树）</p>\n<h2>红黑树</h2>\n<p><strong>引入染色</strong> ：节点非黑即红，满足红黑树的性质则能自平衡</p>\n<p><strong>红黑树 5 大性质</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 1.节点是要么是红色要么是黑色\n\n 2.根节点必是黑色\n\n 3.叶子节点都是黑色\n\n    - 按照空节点算\n\n 4.红色节点的子节点都是黑色\n\n    - 不能出现连续的红色节点（被黑色包裹）\n\n    - 存在连续的黑色节点节点\n\n 5.从任意节点到叶子节点的所有路径都包含相同数目的黑色节点</code></pre></div>\n<p><strong>等价变换</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 红黑树和4阶B树（2，3，4树）等价\n\n  - 黑色节点和它的红色子节点融合在一起形成一个4阶B树节点\n\n  - 红黑树的黑色节点个数和等价的4阶B树节点个数相等</code></pre></div>\n<h3>实现红黑树</h3>\n<p><strong>添加</strong></p>\n<p>4 阶 B 树的元素个数（1 &#x3C;= x &#x3C;= 3)，新元素的添加必定添加到叶子节点中（参考二叉搜索）；</p>\n<p>如果添加的是黑色节点，不能很好的满足红黑树的性质。如果添加的是红色节点能满足 5 条中的 4 条，因此添加新节点时默认染成红色，添加后调整。</p>\n<p>以下列举所有的可能被添加节点(等价于 4 阶 B 树节点)的情况</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(1)r&lt;-b->r   (2)b->r  (3)r&lt;-b  (4)b</code></pre></div>\n<p><strong>第一种情况：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(2)b的左，(3)b的右，(4)b的左右</code></pre></div>\n<p>这四种情况，直接添加，满足红黑树的性质，不做处理</p>\n<p><strong>第二种情况：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(2)b右边r的左右，（3）b左边r的左右</code></pre></div>\n<p>这四种情况，根据 uncle 节点是否是红色节点，不是红色，做 LL/LR，RR/RL 单旋或双旋操作</p>\n<p>LL/RR</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.parent右旋/左旋\n\n2.parent和grandparent交换节点颜色</code></pre></div>\n<p>LR/RL</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.先对parent左旋/右旋 变换为 LL/RR情况\n\n2.针对新的LL/RR处理</code></pre></div>\n<p>插入的新节点和 parent，grandparent 合并为 B 树的一个节点</p>\n<p><strong>第三种情况：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(1)b左边r的左右，(1)b右边r的左右</code></pre></div>\n<p>这四种情况，根据 uncle 节点是否是红色节点，是红色，如果和将 grandparent（黑色）合并为一个 B 树节点则会发生上溢</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 上溢解决\n\n- 1.将uncle和parent染成黑色（分裂成B中的两个节点）\n\n- 2.将grandparent染成红色当作新的待插入的节点，向上合并\n\n- 3.插入新节点grandparent（递归），可能导致上溢向上传播直至根节点</code></pre></div>\n<p><strong>实现：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {*} value\n * @returns {*}\n */</span>\n<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> insertedNode <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>insertedNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make root always be black</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNodeBlack</span><span class=\"token punctuation\">(</span>insertedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make all newly inserted nodes to be red</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNodeRed</span><span class=\"token punctuation\">(</span>insertedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// check all conditions and balance the nodes</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>insertedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> insertedNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {*} node\n * @return {*}\n */</span>\n<span class=\"token function\">balance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNodeBlack</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> grandParent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>uncle <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNodeRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>uncle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNodeBlack</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>uncle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNodeBlack</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNodeRed</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>uncle <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNodeBlack</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>uncle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> newGrandParent<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// left rotate</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// left-left rotate</span>\n          newGrandParent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftLeftRotate</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// left-right rotate</span>\n          newGrandParent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftRightRotate</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// right rotate</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodeComparator<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// right-right rotate</span>\n          newGrandParent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightRightRotate</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// right-left rotate</span>\n          newGrandParent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightLeftRotate</span><span class=\"token punctuation\">(</span>grandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newGrandParent <span class=\"token operator\">&amp;&amp;</span> newGrandParent<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> newGrandParent<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeNodeBlack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>newGrandParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>删除：</strong>\ntodo</p>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://github.com/trekhleb/javascript-algorithms\">https://github.com/trekhleb/javascript-algorithms</a></li>\n</ul>\n<blockquote>\n<p>作者：<a href=\"https://www.shanejix.com/\">shanejix</a>\n出处：<a href=\"https://www.shanejix.com/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20JavaScript%20%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8C%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/\">https://www.shanejix.com/posts/如何使用 JavaScript 实现二叉树，二叉平衡树和红黑树/</a>\n版权：本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">「署名-非商业性使用-相同方式共享 4.0 国际」</a>许可协议进行许可。\n声明：转载请注明出处！</p>\n</blockquote>","frontmatter":{"title":"如何使用 JavaScript 实现二叉树，二叉平衡树和红黑树","date":"December 20, 2020","update":"April 12, 2022","url":"https://github.com/shanejix/shanejix.github.io/issues/41"}}},"pageContext":{"slug":"/如何使用 JavaScript 实现二叉树，二叉平衡树和红黑树/","previous":{"fields":{"slug":"/A Rollover Scene Caused By `node_modules`/"},"frontmatter":{"title":"A Rollover Scene Caused By `node_modules`","tags":["Bug","Node"]}},"next":{"fields":{"slug":"/现代 JavaScript 教程 — JavaScript 编程语言篇/"},"frontmatter":{"title":"现代 JavaScript 教程 — JavaScript 编程语言篇","tags":["JavaScript"]}}}},"staticQueryHashes":["3159585216","63159454"]}