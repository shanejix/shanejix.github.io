{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/Implementation Axios/","result":{"data":{"site":{"siteMetadata":{"title":"shanejix","description":"learner && coder"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9dd4013c-c308-552c-bd2c-04f0cd996599","timeToRead":5}},{"node":{"id":"d29bf37d-75f0-501e-92b1-42c06cdbcd7b","timeToRead":3}},{"node":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","timeToRead":9}},{"node":{"id":"cb3a4052-202e-5a46-bf15-4e9b30e34ebf","timeToRead":3}},{"node":{"id":"45c6b07a-fc6a-5800-9907-86a94c1f4ace","timeToRead":2}},{"node":{"id":"db38bc53-9935-56f0-a9e2-0be373990d78","timeToRead":3}},{"node":{"id":"1dcfd849-d044-5c73-b31a-5fd30393f430","timeToRead":14}},{"node":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","timeToRead":15}},{"node":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","timeToRead":12}},{"node":{"id":"ba521381-a518-5686-a682-0ada55a7dd73","timeToRead":4}},{"node":{"id":"ba58ecad-907f-5ad2-bc26-9167d7607dcc","timeToRead":12}},{"node":{"id":"08b71346-abf3-5649-84f5-2f8ae4f48c6a","timeToRead":3}},{"node":{"id":"da55e002-3a8a-5af2-929e-4de7e3a8d314","timeToRead":4}},{"node":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","timeToRead":2}},{"node":{"id":"af002700-632d-547f-82b9-f31919d4f03e","timeToRead":1}},{"node":{"id":"7b6d671f-8de2-5511-91e9-0797db813dc7","timeToRead":1}},{"node":{"id":"ad4fad45-b734-560c-8324-a9708e1e04c4","timeToRead":1}},{"node":{"id":"ef84ef13-dac8-5cfa-ac69-d0ea44f677f1","timeToRead":2}},{"node":{"id":"69026b7f-ca1c-5eea-8f61-76972396800c","timeToRead":2}},{"node":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","timeToRead":8}},{"node":{"id":"14bde951-d8e7-5045-84f7-dd9479cfafc3","timeToRead":35}},{"node":{"id":"aa4d72c6-d675-52e4-a55b-b07237ed0e1a","timeToRead":2}},{"node":{"id":"eb631c0f-69a5-5ca8-b3c7-1baaed014eea","timeToRead":1}},{"node":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","timeToRead":18}},{"node":{"id":"a40d34f8-b202-5f5b-8c33-19c7c163bbce","timeToRead":5}},{"node":{"id":"afc44728-7e4f-5ce3-bf62-373400a8a46a","timeToRead":12}},{"node":{"id":"ca3cc4cf-0ddf-5fb3-a58d-2354b2f0a10e","timeToRead":5}},{"node":{"id":"fe7fd5be-04af-5d1a-b969-f8f4de7db655","timeToRead":1}},{"node":{"id":"fb3bc99d-cf2f-5fbd-981d-1d701815f87b","timeToRead":66}},{"node":{"id":"4de1fb79-73c7-5593-adc3-427351c465e9","timeToRead":101}},{"node":{"id":"9a102758-e412-5f31-8753-54534e8fdb15","timeToRead":1}},{"node":{"id":"a07217e5-4cbe-54e4-9566-2a0df732a1a4","timeToRead":1}},{"node":{"id":"c8a73065-3214-5616-93f3-0df2a119e91d","timeToRead":1}}]},"markdownRemark":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","excerpt":"同步链接: https://www.shanejix.com/posts/Implementation Axios/ 曾经想过实现一个 mini 版的 axios，终于达成目标了！  也许你会捂不住嘴直呼这 tm 不是 Ajax（Async JavaScript And XML）吗~，跟 axios…","html":"<blockquote>\n<p>同步链接: <a href=\"https://www.shanejix.com/posts/Implementation%20Axios/\">https://www.shanejix.com/posts/Implementation Axios/</a></p>\n</blockquote>\n<p>曾经想过实现一个 mini 版的 axios，终于达成目标了！</p>\n<p><code class=\"language-text\">mini axios</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也许你会捂不住嘴直呼这 tm 不是 Ajax（Async JavaScript And XML）吗~，跟 axios 有毛关系。</p>\n<p>当然，如果没看过 axios 源码，确实很难让 axios 的浏览器实现和 Ajax 扯上联系，axios 不仅包装了 XMLHttpRequest，而且还很彻底，多彻底呢？</p>\n<p>XMLHttpRequest 的属性：</p>\n<ul>\n<li>onreadystatechange</li>\n<li>readyState</li>\n<li>response</li>\n<li>responseText</li>\n<li>responseType</li>\n<li>responseURL</li>\n<li>responseXML</li>\n<li>status</li>\n<li>statusText</li>\n<li>timeout</li>\n<li>upload</li>\n<li>withCredentials</li>\n</ul>\n<p>XMLHttpRequest 的方法：</p>\n<ul>\n<li>abort()</li>\n<li>getAllResponseHeaders()</li>\n<li>getResponseHeader()</li>\n<li>open()</li>\n<li>openRequest()</li>\n<li>overrideMimeType()</li>\n<li>send()</li>\n<li>setRequestHeader()</li>\n</ul>\n<p>能用上的几乎都用上了！一览无余，是否有似曾相识的感觉！在没有 axios 的时代，可是手撸 http 请求的呢（得瑟）。怎么，还是还是觉得太空旷难以和 axios 的使用或实现建立联系？别慌！慢慢来，让我们从 axios 的使用和功能慢慢回忆。</p>\n<h2>Axios</h2>\n<p>首先需要知道 axios 是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生 XHR 的封装，只不过它是 Promise 的实现版本，有以下特点：</p>\n<ul>\n<li>在浏览器端使用 XMLHttpRequest 对象通讯</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API</li>\n<li>支持请求和响应的拦截器</li>\n<li>支持请求数据和响应数据的转换</li>\n<li>支持请求的取消</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF</li>\n</ul>\n<p>看了一大堆不如 demo 来得直接：</p>\n<p>超级简单的</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user?ID=12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>几乎涵盖所有所有用法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Set config defaults when creating the instance</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Append interceptors with instance</span>\n<span class=\"token keyword\">const</span> myInterceptor <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">eject</span><span class=\"token punctuation\">(</span>myInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Alter defaults after instance has been created</span>\ninstance<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">[</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">AUTH_TOKEN</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Alter properties after alert defaults in request</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/longRequest'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token operator\">:</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// config</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"/xxx\"</span><span class=\"token punctuation\">,</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"https://some-domain.com/api/\"</span><span class=\"token punctuation\">,</span>\n  transformRequest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  transformResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"X-Requested-With\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"XMLHttpRequest\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">paramsSerializer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> arrayFormat<span class=\"token operator\">:</span> <span class=\"token string\">\"brackets\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  <span class=\"token function-variable function\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  responseType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  responseEncoding<span class=\"token operator\">:</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  xsrfCookieName<span class=\"token operator\">:</span> <span class=\"token string\">\"XSRF-TOKEN\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  xsrfHeaderName<span class=\"token operator\">:</span> <span class=\"token string\">\"X-XSRF-TOKEN\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  <span class=\"token function-variable function\">onUploadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onDownloadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  maxContentLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  maxRedirects<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  socketPath<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n  httpAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">http<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  httpsAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">https<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  cancelToken<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// response model</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">response</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  statusText<span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  request<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上述 instance 实例对于 axios 同样适用，有没有发现很多属性和方法 XMLHttpRequest 中有 axios 中同样也有呢？</p>\n<p>没错 axios 中大部分的核心功能就是基于此的，下面看看是怎么实现 axios 的核心功能的吧！</p>\n<h2>核心实现</h2>\n<p>首先，用 create-react-app 创建了个简单的 demo 用于模拟查看 axios 的具体调用逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n  Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.biying.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>demo 中 get 请求的调用栈如下图</p>\n<p><img src=\"https://shanejix.github.io/images/Implementation%20Axios-callstackanother.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=poVhv&#x26;originHeight=236&#x26;originWidth=491&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<p>大致可以分为三个阶段：</p>\n<p><strong>merge config</strong></p>\n<p>左边的小红框\n<img src=\"https://shanejix.github.io/images/Implementation%20Axios-callstackall.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=Sjpvw&#x26;originHeight=532&#x26;originWidth=1897&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<p><strong>transform</strong></p>\n<p>转换各种 data\n<img src=\"https://shanejix.github.io/images/Implementation%20Axios-callstack1.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=N2g8q&#x26;originHeight=332&#x26;originWidth=1786&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<p><strong>request</strong></p>\n<p>依据 adapter 发送真实请求\n<img src=\"https://shanejix.github.io/images/Implementation%20Axios-callstack2.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=kQZ50&#x26;originHeight=449&#x26;originWidth=1899&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<p>当然这只是宏观上的认识，具体实现还得从源码入手</p>\n<h3>Index</h3>\n<p><a href=\"https://github.com/axios/axios/blob/master/index.js\">https://github.com/axios/axios/blob/master/index.js</a></p>\n<p>入口直接 require 到 lib 目录下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./lib/axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>axios</h3>\n<p><a href=\"https://github.com/axios/axios/blob/master/lib/axios.js\">https://github.com/axios/axios/blob/master/lib/axios.js</a></p>\n<p>直接导出 axios</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Allow use of default import syntax in TypeScript</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">;</span></code></pre></div>\n<p>并且，导出的 axios 是默认配置 defaults 的实例对象</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Create the default instance to be exported</span>\n<span class=\"token keyword\">var</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>defaults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后对 axios 对象做了扩展,create 方法，Axios 类，CancelToken 等等</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Expose Axios class to allow class inheritance</span>\naxios<span class=\"token punctuation\">.</span>Axios <span class=\"token operator\">=</span> Axios<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Factory for creating new instances</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instanceConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token function\">mergeConfig</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">,</span> instanceConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Expose Cancel &amp; CancelToken</span>\naxios<span class=\"token punctuation\">.</span>Cancel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./cancel/Cancel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span>CancelToken <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./cancel/CancelToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span>isCancel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./cancel/isCancel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Expose all/spread</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>createInstance</strong>:</p>\n<p>创建 axios 实例，并绑定 context 上下文</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Axios</span><span class=\"token punctuation\">(</span>defaultConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Axios</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Copy axios.prototype to instance</span>\n  utils<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Axios</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Copy context to instance</span>\n  utils<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>defaults</strong>:</p>\n<p><a href=\"https://github.com/axios/axios/blob/master/lib/defaults.js\">https://github.com/axios/axios/blob/master/lib/defaults.js</a></p>\n<p>默认配置中包含适配器（根据环境决定用什么发送请求），发送请求前对 data 和 headers 的转换函数，接受请求后对 data 的转换函数等</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  adapter<span class=\"token operator\">:</span> <span class=\"token function\">getDefaultAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  transformRequest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token function\">transformRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  transformResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token function\">transformResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n  xsrfCookieName<span class=\"token operator\">:</span> <span class=\"token string\">\"XSRF-TOKEN\"</span><span class=\"token punctuation\">,</span>\n  xsrfHeaderName<span class=\"token operator\">:</span> <span class=\"token string\">\"X-XSRF-TOKEN\"</span><span class=\"token punctuation\">,</span>\n\n  maxContentLength<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  maxBodyLength<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validateStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ndefaults<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  common<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Axios</h3>\n<p><a href=\"https://github.com/axios/axios/blob/master/lib/core/Axios.js\">https://github.com/axios/axios/blob/master/lib/core/Axios.js</a></p>\n<p><strong>Axios()</strong>:</p>\n<p>构造函数初始化 defauls 属性和请求响应拦截器</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Axios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instanceConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaults <span class=\"token operator\">=</span> instanceConfig<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    request<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>request(核心）</strong>:</p>\n<p>request() 方法实际执行 dispatchRequest 时会将请求拦截和响应拦截中加入 chain 队列的两端，从而实现一个<strong>promise 调用链</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */</span>\n<span class=\"token class-name\">Axios</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">request</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Allow for axios('example/url'[, config]) a la fetch API</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// Set config.method</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// Hook up interceptors middleware</span>\n  <span class=\"token keyword\">var</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dispatchRequest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">unshiftRequestInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chain<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> interceptor<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">pushResponseInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chain<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> interceptor<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    promise <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>InterceptorManager</strong>：</p>\n<p>（请求和响应）拦截器其实就是基于<strong>队列</strong>，实现的一个发布订阅模型</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>订阅：入栈的对象的两个 key 所对应的 value 分别对应 promise 中的 resoveleFn 和 rejectedFn 回调</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */</span>\n<span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fulfilled<span class=\"token punctuation\">,</span> rejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    fulfilled<span class=\"token operator\">:</span> fulfilled<span class=\"token punctuation\">,</span>\n    rejected<span class=\"token operator\">:</span> rejected<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>发布：遍历 handlers 数组中个每个 item，在 request()中会加入 chain 的两端</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */</span>\n<span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">forEach</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  utils<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forEachHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>取消：对应位置设置为 null（不是直接删除这个位置的元素），chain 链中不会执行</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */</span>\n<span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>dispatchRequest</strong>:</p>\n<p><a href=\"https://github.com/axios/axios/blob/master/lib/core/dispatchRequest.js\">https://github.com/axios/axios/blob/master/lib/core/dispatchRequest.js</a></p>\n<p>核心逻辑就是，调用 adapter 执行正真的请求</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">dispatchRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Ensure headers exist</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// Transform request data</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// Flatten headers</span>\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">var</span> adapter <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>adapter <span class=\"token operator\">||</span> defaults<span class=\"token punctuation\">.</span>adapter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">adapter</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">onAdapterResolution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Transform response data</span>\n    response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span>\n      response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n      response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n      config<span class=\"token punctuation\">.</span>transformResponse\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onAdapterRejection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token comment\">// Transform response data</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reason <span class=\"token operator\">&amp;&amp;</span> reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span>\n        reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n        reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>transformResponse\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>getDefaultAdapter()</h3>\n<p>简单直接，对浏览器端和 node 判断</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDefaultAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> adapter<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> XMLHttpRequest <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For browsers use XHR adapter</span>\n    adapter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./adapters/xhr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> process <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object process]\"</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For node use HTTP adapter</span>\n    adapter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./adapters/http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> adapter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>xhrAdapter</strong>:</p>\n<p><a href=\"https://github.com/axios/axios/blob/master/lib/adapters/xhr.js\">https://github.com/axios/axios/blob/master/lib/adapters/xhr.js</a></p>\n<p>返回一个 promise，核心逻辑还是对 XMLHttpRequest 的运用，是不是和开篇殊途同归呢</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">xhrAdapter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">dispatchXhrRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// HTTP basic authentication</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Set the request timeout in MS</span>\n    request<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Listen for ready state</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>request <span class=\"token operator\">||</span> request<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// The request errored out and we didn't get a response, this will be</span>\n      <span class=\"token comment\">// handled by onerror instead</span>\n      <span class=\"token comment\">// With one exception: request that using file: protocol, most browsers</span>\n      <span class=\"token comment\">// will return status as 0 even though it's a successful request</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseURL <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span>responseURL<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file:'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Prepare the response</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token operator\">:</span> responseData<span class=\"token punctuation\">,</span>\n        status<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span>\n        statusText<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">,</span>\n        headers<span class=\"token operator\">:</span> responseHeaders<span class=\"token punctuation\">,</span>\n        config<span class=\"token operator\">:</span> config<span class=\"token punctuation\">,</span>\n        request<span class=\"token operator\">:</span> request\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Clean up request</span>\n      request <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Handle browser request cancellation (as opposed to a manual cancellation)</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onabort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleAbort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">createError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request aborted'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token string\">'ECONNABORTED'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Clean up request</span>\n      request <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Handle low level network errors</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Real errors are hidden from us by the browser</span>\n      <span class=\"token comment\">// onerror should only fire if it's a network error</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">createError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Network Error'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Clean up request</span>\n      request <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Handle timeout</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontimeout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> timeoutErrorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'timeout of '</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">+</span> <span class=\"token string\">'ms exceeded'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>timeoutErrorMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        timeoutErrorMessage <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>timeoutErrorMessage<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">createError</span><span class=\"token punctuation\">(</span>timeoutErrorMessage<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token string\">'ECONNABORTED'</span><span class=\"token punctuation\">,</span>\n        request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Clean up request</span>\n      request <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Add xsrf header</span>\n    <span class=\"token comment\">// This is only done if running in a standard browser environment.</span>\n    <span class=\"token comment\">// Specifically not if we're in a web worker, or react-native.</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Add headers to the request</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'setRequestHeader'</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Add withCredentials to request if needed</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Add responseType to request if needed</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token comment\">// Handle progress if needed</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Not all browsers support upload events</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// Send the request</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>总结</h2>\n<p>沿着本文的思路顺便画了张图</p>\n<p><img src=\"https://shanejix.github.io/images/Implementation%20Axios_last.png#crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;id=z8YfJ&#x26;originHeight=2160&#x26;originWidth=3840&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;status=done&#x26;style=none&#x26;title=\"></p>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></li>\n</ul>\n<blockquote>\n<p>作者：<a href=\"https://www.shanejix.com/\">shanejix</a>\n出处：<a href=\"https://www.shanejix.com/posts/Implementation%20Axios/\">https://www.shanejix.com/posts/Implementation Axios/</a>\n版权：本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">「署名-非商业性使用-相同方式共享 4.0 国际」</a>许可协议进行许可。\n声明：转载请注明出处！</p>\n</blockquote>","frontmatter":{"title":"Implementation Axios","date":"August 17, 2020","update":"April 12, 2022","url":"https://github.com/shanejix/shanejix.github.io/issues/27"}}},"pageContext":{"slug":"/Implementation Axios/","previous":{"fields":{"slug":"/Promises implementation with ES6 class/"},"frontmatter":{"title":"Promises implementation with ES6 class","tags":["JavaScript","Snippet","Promise"]}},"next":{"fields":{"slug":"/Good Git Commit Message/"},"frontmatter":{"title":"Good Git Commit Message","tags":["Git"]}}}},"staticQueryHashes":["3159585216","63159454"]}