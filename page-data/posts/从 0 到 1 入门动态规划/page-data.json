{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/从 0 到 1 入门动态规划/","result":{"data":{"site":{"siteMetadata":{"title":"shanejix","description":"learner && coder"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9dd4013c-c308-552c-bd2c-04f0cd996599","timeToRead":5}},{"node":{"id":"d29bf37d-75f0-501e-92b1-42c06cdbcd7b","timeToRead":3}},{"node":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","timeToRead":9}},{"node":{"id":"cb3a4052-202e-5a46-bf15-4e9b30e34ebf","timeToRead":3}},{"node":{"id":"45c6b07a-fc6a-5800-9907-86a94c1f4ace","timeToRead":2}},{"node":{"id":"db38bc53-9935-56f0-a9e2-0be373990d78","timeToRead":3}},{"node":{"id":"1dcfd849-d044-5c73-b31a-5fd30393f430","timeToRead":14}},{"node":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","timeToRead":15}},{"node":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","timeToRead":12}},{"node":{"id":"ba521381-a518-5686-a682-0ada55a7dd73","timeToRead":4}},{"node":{"id":"ba58ecad-907f-5ad2-bc26-9167d7607dcc","timeToRead":12}},{"node":{"id":"08b71346-abf3-5649-84f5-2f8ae4f48c6a","timeToRead":3}},{"node":{"id":"da55e002-3a8a-5af2-929e-4de7e3a8d314","timeToRead":4}},{"node":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","timeToRead":2}},{"node":{"id":"af002700-632d-547f-82b9-f31919d4f03e","timeToRead":1}},{"node":{"id":"7b6d671f-8de2-5511-91e9-0797db813dc7","timeToRead":1}},{"node":{"id":"ad4fad45-b734-560c-8324-a9708e1e04c4","timeToRead":1}},{"node":{"id":"ef84ef13-dac8-5cfa-ac69-d0ea44f677f1","timeToRead":2}},{"node":{"id":"69026b7f-ca1c-5eea-8f61-76972396800c","timeToRead":2}},{"node":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","timeToRead":8}},{"node":{"id":"14bde951-d8e7-5045-84f7-dd9479cfafc3","timeToRead":35}},{"node":{"id":"aa4d72c6-d675-52e4-a55b-b07237ed0e1a","timeToRead":2}},{"node":{"id":"eb631c0f-69a5-5ca8-b3c7-1baaed014eea","timeToRead":1}},{"node":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","timeToRead":18}},{"node":{"id":"a40d34f8-b202-5f5b-8c33-19c7c163bbce","timeToRead":5}},{"node":{"id":"afc44728-7e4f-5ce3-bf62-373400a8a46a","timeToRead":12}},{"node":{"id":"ca3cc4cf-0ddf-5fb3-a58d-2354b2f0a10e","timeToRead":5}},{"node":{"id":"fe7fd5be-04af-5d1a-b969-f8f4de7db655","timeToRead":1}},{"node":{"id":"fb3bc99d-cf2f-5fbd-981d-1d701815f87b","timeToRead":66}},{"node":{"id":"4de1fb79-73c7-5593-adc3-427351c465e9","timeToRead":101}},{"node":{"id":"9a102758-e412-5f31-8753-54534e8fdb15","timeToRead":1}},{"node":{"id":"a07217e5-4cbe-54e4-9566-2a0df732a1a4","timeToRead":1}},{"node":{"id":"c8a73065-3214-5616-93f3-0df2a119e91d","timeToRead":1}}]},"markdownRemark":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","excerpt":"同步链接: https://www.shanejix.com/posts/从 0 到…","html":"<blockquote>\n<p>同步链接: <a href=\"https://www.shanejix.com/posts/%E4%BB%8E%200%20%E5%88%B0%201%20%E5%85%A5%E9%97%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/\">https://www.shanejix.com/posts/从 0 到 1 入门动态规划/</a></p>\n</blockquote>\n<h2>从贪心说起（局部最优）</h2>\n<p>贪心算法的基本思路如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 将待求解问题分解为若干子问题，分别对子问题求解得到子问题的局部最优解\n\n2. 将子问题的局部最优解的进行合并，得到基于局部最优解的结果</code></pre></div>\n<p>所谓贪心就是着眼于当下（局部）的最优结果，而不从整体（全局）出发考虑。两种思路分别对应<strong>局部最优解</strong>和<strong>整体最优解</strong></p>\n<p>可以看出，<strong>贪心的局部最优整合的结果往往不是全局的最优解</strong>！例如：<a href=\"https://leetcode-cn.com/problems/coin-change/\">322. 零钱兑换</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">问题：\n\n给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。\n\n计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。\n\n你可以认为每种硬币的数量是无限的。</code></pre></div>\n<p>按照 贪心的思路 通过从大到小<strong>枚举</strong>所有硬币面值，应该优先尽可能多的使用面值大的硬币，这样用掉的硬币数量才会尽可能的少！代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 🎨 方法一：贪心算法</span>\n\n<span class=\"token comment\">// 📝 思路：贪心得到局部最优，但肯能不是整体最优，因此存在用例不过</span>\n\n<span class=\"token comment\">/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coinChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  coins<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 从大到小遍历面值</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> coin <span class=\"token keyword\">of</span> coins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 计算当前面值能用多少个</span>\n    <span class=\"token keyword\">let</span> currCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>rest <span class=\"token operator\">/</span> coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 累加当前面额使用数量</span>\n    count <span class=\"token operator\">+=</span> currCount<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用当前面值后更新剩余面值</span>\n    rest <span class=\"token operator\">-=</span> coin <span class=\"token operator\">*</span> currCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rest <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>贪心不适合所有问题（有的用例是不通过），正是因为有时太贪了！例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">从 coins[0]=5, coins[1]=3 且 k=11 的情况下寻求最少硬币数\n\n按照“贪心思路”，先挑选面值最大的，即为 5 的硬币放入钱包。接着，还有 6 元待解（即 11-5 = 6）。这时，再次“贪心”，放入 5 元面值的硬币。这个时候就只剩下 1 元了，再放入 5 就不能刚刚凑整 11 元。但其实这个问题是有解的（5 + 3 + 3 = 11）。</code></pre></div>\n<p>这就是<strong>过度贪心</strong>导致的问题，可以通过<strong>回溯</strong>解决，正如同：电梯超负荷了下去个胖子上来个瘦子</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 🎨 方法二：回溯 + 递归</span>\n\n<span class=\"token comment\">// 📝 思路：用例没通过</span>\n\n<span class=\"token comment\">/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coinChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 组合硬币的数量</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n  coins<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 从当前组合中求最小硬币数量\n   * @param {*} coins\n   * @param {*} total\n   * @param {*} index\n   * @returns\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMinCoinCountOfValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> minResult <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currValue <span class=\"token operator\">=</span> coins<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> maxCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">/</span> currValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> maxCount<span class=\"token punctuation\">;</span> count <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> count <span class=\"token operator\">*</span> currValue<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rest <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        minResult <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minResult<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">let</span> restCount <span class=\"token operator\">=</span> <span class=\"token function\">getMinCoinCountOfValue</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>restCount <span class=\"token operator\">===</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      minResult <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minResult<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> restCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> minResult<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 求所有满足条件的组合\n   * @param {*} coins\n   * @param {*} amount\n   * @param {*} index\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMinCoinCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 递归终止的条件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// getMinCoinCountOfValue() 对重新排序后的coins求最小硬币数量</span>\n      res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token function\">getMinCoinCountOfValue</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// swap</span>\n      <span class=\"token punctuation\">[</span>coins<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> coins<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 做出选择</span>\n      res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token function\">getMinCoinCount</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 回溯 撤销选择</span>\n        <span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> coins<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getMinCoinCount</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 没有任意的硬币组合能组成总金额，则返回 -1</span>\n  <span class=\"token keyword\">return</span> res <span class=\"token operator\">===</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其实，方法二中回溯递归的算和方法一中的枚举本质上都是<strong>枚举问题</strong>：<strong>枚举出所有问题，从中选择最优解</strong></p>\n<p>递归的过程其实可以等同出一棵<strong>递归树</strong>，如果遍历完整棵树（枚举所有情况）时间复杂度非常高（指数级），并且遍历时存在大量的重叠子问题（可以参考画出著名的求斐波那契数列递归的解法的递归树）。因此有时需要通过条件进行<strong>剪枝优化</strong>。</p>\n<p><strong>贪心</strong>正是<a href=\"https://leetcode-cn.com/problems/coin-change/\">322. 零钱兑换</a>方法二中递归的剪枝优化思路。对应<strong>递归树</strong>中最短路径，但最短路径往往不是所求得的解，因此需要回溯遍历其他路径。相比较枚举完所有情况能节省不少复杂度。</p>\n<h2>重叠子问题（记忆化搜索）</h2>\n<p>为了<strong>消除普遍存在的重复子问题</strong>，需要采用另外的思路来进行优化，普遍使用的手段时<strong>状态存储</strong>或<strong>记忆化搜索</strong> <strong>memorization</strong></p>\n<p>例如：<a href=\"https://leetcode-cn.com/problems/coin-change/\">322. 零钱兑换</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 🎨 方法三：递归 + 记忆化搜索</span>\n\n<span class=\"token comment\">// 📝 思路：枚举存在大量重复，用memo缓存重复计算的值</span>\n\n<span class=\"token comment\">/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coinChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 组合硬币的数量</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 缓存重复计算的值,memo[total] 表示币值数量为 total 可以换取的最小硬币数量，没有缓存则为 -2</span>\n  <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 0 对应的结果为 0</span>\n  memo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  coins<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 找到 total 数量零钱可以兑换的最少硬币数量\n   * @param {*} coins\n   * @param {*} total\n   * @returns\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMinCoinCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 递归终止的条件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 递归终止的条件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 先从缓存中查找 memo[total]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> minCount <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 遍历所有面值</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果当前面值大于总额则跳过</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 使用当前面额，并求剩余总额的最小硬币数量</span>\n      <span class=\"token keyword\">let</span> restCount <span class=\"token operator\">=</span> <span class=\"token function\">getMinCoinCount</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> total <span class=\"token operator\">-</span> coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>restCount <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 当前选择的coins[i] 组合不成立，跳过</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 更新最小总额</span>\n      <span class=\"token keyword\">let</span> totalCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> restCount<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalCount <span class=\"token operator\">&lt;</span> minCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        minCount <span class=\"token operator\">=</span> totalCount<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 如果没有可用组合，返回 -1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minCount <span class=\"token operator\">===</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      memo<span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 更新缓存</span>\n    memo<span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> minCount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getMinCoinCount</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>记忆化搜索是<strong>自顶向下</strong>递归的过程，将大问题不断的拆解成小问题，然后对小问题逐个求解。递归很直观，但是存在<strong>性能问题</strong>（基于栈，产生额外的时间和空间开销）和<strong>难调试</strong>等问题。</p>\n<h2>迭代和动态规划</h2>\n<p>为了规避递归（记忆化搜索）的缺点可以，可以将自顶向下的递归实现转化为<strong>自底向上</strong>的<strong>迭代</strong>实现。</p>\n<p>如果在预知处理每个大问题前必须处理那些小问题，那么就可以先求解所有的小问题的解再求解大问题的解，这就是<strong>自底向上</strong>的过程。</p>\n<p>如果子问题的<strong>依赖关系是单向的</strong>，（a 依赖于 b ，但是 b 不直接或间接依赖于 a），那么就可以直接自底向上求解。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 🎨 方法五：动态规划</span>\n\n<span class=\"token comment\">// 📝 思路：自底向上，记忆化化搜索</span>\n\n<span class=\"token comment\">/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coinChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// memo[total] 表示币值数量为 total 可以换取的最小硬币数量，没有缓存则为 -1</span>\n  <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 初始化状态</span>\n  memo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 币值总额状态从 1 到 amount</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;=</span> amount<span class=\"token punctuation\">;</span> v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 当前币值总额 v 对应的能凑齐最小硬币数量</span>\n    <span class=\"token keyword\">let</span> minCount <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 对当前币值总额 v 枚举所有的 硬币面值</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> currValue <span class=\"token operator\">=</span> coins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 如果当前面值大于币值总额，跳过</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currValue <span class=\"token operator\">></span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 使用当前面值，得到剩余币值总额</span>\n      <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> v <span class=\"token operator\">-</span> currValue<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 从缓存中取出剩余币值总额对应的最小硬币数量</span>\n      <span class=\"token keyword\">let</span> restCount <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>rest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// -1 则表示 组合不成立 跳过</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>restCount <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 当前币值组合成立</span>\n      <span class=\"token keyword\">let</span> currCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> restCount<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 更新当前币值总额 v 的最小硬币数量</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currCount <span class=\"token operator\">&lt;</span> minCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        minCount <span class=\"token operator\">=</span> currCount<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 当前币值总额 v 的最小硬币数量若存在则缓存</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minCount <span class=\"token operator\">!==</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      memo<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>没错，这种通过迭代实现的记忆化搜索的求解过程就是<strong>动态规划</strong></p>\n<h2>动态规划特征</h2>\n<p>标准的动态规划一般包含下面三个特征</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 重叠子问题：在枚举过程中存在重复计算的现象（如斐波那契数列递归实现）\n\n\n- 最优子结构：子问题之间必须相互独立，后续的计算可以通过前面的状态推导出来\n\n\n- 无后效性：子问题之间的依赖是单向性的，已经确定的状态不会受到后续决策的影响</code></pre></div>\n<h2>通用动态规划解题框架</h2>\n<p>动态规划的核心是 <strong>状态转移方程</strong> ，需要确定以下几点</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 状态（状态参数）：子问题和原问题之间会发生变化的量（状态变量）\n\n- 状态存储 memo ： 根据状态参数 定义 dp[i]...[j] 的含义\n\n- 初始化状态：需要一个“原点”最为计算的开端（从已经计算好的子问题推广到更大的问题上）\n\n- 决策和状态转移：改变状态，让状态不断逼近初始化状态的行为</code></pre></div>\n<p>以上是解决动态规划的整体思路，若要灵活运用还需熟练各类经典的动态规划题目，见 <a href=\"https://github.com/shanejix/algorithm-and-data-structure\">分类列表</a></p>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://time.geekbang.org/column/intro/100060501\">https://time.geekbang.org/column/intro/100060501</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/coin-change/\">https://leetcode-cn.com/problems/coin-change/</a></li>\n<li><a href=\"https://github.com/shanejix/algorithm-and-data-structure\">https://github.com/shanejix/algorithm-and-data-structure</a></li>\n<li><a href=\"https://github.com/shanejix/algorithm-and-data-structure/blob/master/pattern/dynamic-programming/0322.CoinChange.js\">https://github.com/shanejix/algorithm-and-data-structure/blob/master/pattern/dynamic-programming/0322.CoinChange.js</a></li>\n</ul>\n<blockquote>\n<p>作者：<a href=\"https://www.shanejix.com/\">shanejix</a>\n出处：<a href=\"https://www.shanejix.com/posts/%E4%BB%8E%200%20%E5%88%B0%201%20%E5%85%A5%E9%97%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/\">https://www.shanejix.com/posts/从 0 到 1 入门动态规划/</a>\n版权：本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">「署名-非商业性使用-相同方式共享 4.0 国际」</a>许可协议进行许可。\n声明：转载请注明出处！</p>\n</blockquote>","frontmatter":{"title":"从 0 到 1 入门动态规划","date":"August 14, 2021","update":"April 12, 2022","url":"https://github.com/shanejix/shanejix.github.io/issues/50"}}},"pageContext":{"slug":"/从 0 到 1 入门动态规划/","previous":{"fields":{"slug":"/现代 JavaScript 教程 — JavaScript 编程语言篇/"},"frontmatter":{"title":"现代 JavaScript 教程 — JavaScript 编程语言篇","tags":["JavaScript"]}},"next":{"fields":{"slug":"/使用 Github Action 将 Gatsby 站点部署到 Github Pages/"},"frontmatter":{"title":"使用 Github Action 将 Gatsby 站点部署到 Github Pages","tags":["None"]}}}},"staticQueryHashes":["3159585216","63159454"]}