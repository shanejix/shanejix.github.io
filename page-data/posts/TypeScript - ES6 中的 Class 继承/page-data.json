{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/TypeScript - ES6 中的 Class 继承/","result":{"data":{"site":{"siteMetadata":{"title":"shanejix","description":"learner && coder"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9dd4013c-c308-552c-bd2c-04f0cd996599","timeToRead":5}},{"node":{"id":"d29bf37d-75f0-501e-92b1-42c06cdbcd7b","timeToRead":3}},{"node":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","timeToRead":9}},{"node":{"id":"cb3a4052-202e-5a46-bf15-4e9b30e34ebf","timeToRead":3}},{"node":{"id":"45c6b07a-fc6a-5800-9907-86a94c1f4ace","timeToRead":2}},{"node":{"id":"db38bc53-9935-56f0-a9e2-0be373990d78","timeToRead":3}},{"node":{"id":"1dcfd849-d044-5c73-b31a-5fd30393f430","timeToRead":14}},{"node":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","timeToRead":15}},{"node":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","timeToRead":12}},{"node":{"id":"ba521381-a518-5686-a682-0ada55a7dd73","timeToRead":4}},{"node":{"id":"ba58ecad-907f-5ad2-bc26-9167d7607dcc","timeToRead":12}},{"node":{"id":"08b71346-abf3-5649-84f5-2f8ae4f48c6a","timeToRead":3}},{"node":{"id":"da55e002-3a8a-5af2-929e-4de7e3a8d314","timeToRead":4}},{"node":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","timeToRead":2}},{"node":{"id":"af002700-632d-547f-82b9-f31919d4f03e","timeToRead":1}},{"node":{"id":"7b6d671f-8de2-5511-91e9-0797db813dc7","timeToRead":1}},{"node":{"id":"ad4fad45-b734-560c-8324-a9708e1e04c4","timeToRead":1}},{"node":{"id":"ef84ef13-dac8-5cfa-ac69-d0ea44f677f1","timeToRead":2}},{"node":{"id":"69026b7f-ca1c-5eea-8f61-76972396800c","timeToRead":2}},{"node":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","timeToRead":8}},{"node":{"id":"14bde951-d8e7-5045-84f7-dd9479cfafc3","timeToRead":35}},{"node":{"id":"aa4d72c6-d675-52e4-a55b-b07237ed0e1a","timeToRead":2}},{"node":{"id":"eb631c0f-69a5-5ca8-b3c7-1baaed014eea","timeToRead":1}},{"node":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","timeToRead":18}},{"node":{"id":"a40d34f8-b202-5f5b-8c33-19c7c163bbce","timeToRead":5}},{"node":{"id":"afc44728-7e4f-5ce3-bf62-373400a8a46a","timeToRead":12}},{"node":{"id":"ca3cc4cf-0ddf-5fb3-a58d-2354b2f0a10e","timeToRead":5}},{"node":{"id":"fe7fd5be-04af-5d1a-b969-f8f4de7db655","timeToRead":1}},{"node":{"id":"fb3bc99d-cf2f-5fbd-981d-1d701815f87b","timeToRead":66}},{"node":{"id":"4de1fb79-73c7-5593-adc3-427351c465e9","timeToRead":101}},{"node":{"id":"9a102758-e412-5f31-8753-54534e8fdb15","timeToRead":1}},{"node":{"id":"a07217e5-4cbe-54e4-9566-2a0df732a1a4","timeToRead":1}},{"node":{"id":"c8a73065-3214-5616-93f3-0df2a119e91d","timeToRead":1}}]},"markdownRemark":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","excerpt":"同步链接: https://www.shanejix.com/posts/TypeScript - ES6 中的 Class 继承/ typescript 中的 class 继承是基于 ES6 中 class 的扩展。因此可以类比 vanillajs 中基于原型的继承和 ES6 中的 class 继承的变化。其实，ES…","html":"<blockquote>\n<p>同步链接: <a href=\"https://www.shanejix.com/posts/TypeScript%20-%20ES6%20%E4%B8%AD%E7%9A%84%20Class%20%E7%BB%A7%E6%89%BF/\">https://www.shanejix.com/posts/TypeScript - ES6 中的 Class 继承/</a></p>\n</blockquote>\n<p>typescript 中的 class 继承是基于 ES6 中 class 的扩展。因此可以类比 vanillajs 中基于原型的继承和 ES6 中的 class 继承的变化。其实，ES6 中的 class 继承其实就是 vanillajs 的语法糖，但又不仅仅是语法糖。</p>\n<h2>Class 基本语法</h2>\n<p>基本的类语法看起来像这样:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 属性； class 字段 prop 会在在每个独立对象中被设好，而不是设在 Myclass.prototype</span>\n  prop <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 属性； class 字段 prop 更优雅的绑定方法</span>\n  <span class=\"token function-variable function\">prop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 构造器</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// method</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// getter 方法</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// setter 方法</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 有计算名称（computed name）的方法（此处为 symbol）</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要注意：</p>\n<ul>\n<li><code class=\"language-text\">MyClass</code> 是一个函数（提供作为 <code class=\"language-text\">constructor</code> 的那个）</li>\n<li>**<code class=\"language-text\">methods</code>、<code class=\"language-text\">getters</code> 和 <code class=\"language-text\">settors</code> 都被写入了 MyClass.prototype **</li>\n<li><code class=\"language-text\">prop</code> 每个实例都有一份</li>\n</ul>\n<p><strong>ES6 class 中没有直接定义到 prototype 上的属性的实现，可以借助 getter 和 setter 模拟共享属性</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES6中</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  \t_name <span class=\"token operator\">=</span> <span class=\"token string\">'shanejix'</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// ** getter 和 setter 会被写到 MyClass.prototype上 **</span>\n\n\n<span class=\"token comment\">// ES5中对应实现</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token string\">'shanejix'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Class 继承</h2>\n<h3>扩展一个类：<code class=\"language-text\">class Child extends Parent</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* 在内部，关键字 extends 使用了很好的旧的原型机制进行工作\n\n- 它将 Child.prototype.[[Prototype]] 设置为 Parent.prototype</code></pre></div>\n<p>在 extends 后允许任意表达式:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello</span>\n\n<span class=\"token comment\">// 这对于高级编程模式，例如当根据许多条件使用函数生成类，并继承它们时来说可能很有用</span></code></pre></div>\n<blockquote>\n<p>有时不希望完全替换父类的方法，而是希望在父类方法的基础上进行调整或扩展其功能</p>\n</blockquote>\n<h3>重写一个方法</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* 默认情况下，所有未在 class child 中指定的方法均从 class Parent 中直接获取</code></pre></div>\n<p>Class 为此提供了 “super” 关键字:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 执行 super.method(...) 来调用一个父类方法\n\n- 执行 super(...) 来调用一个父类 constructor（只能在子类的 constructor 中）</code></pre></div>\n<blockquote>\n<p>补充：箭头函数没有 super 和 this</p>\n</blockquote>\n<h3>重写一个 constructor</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 根据 规范，如果一个类扩展了另一个类并且没有 constructor，那么将生成下面这样的 constructor：</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 为没有自己的 constructor 的扩展类生成的</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>”继承类的 constructor 必须调用 super(…)，并且一定要在使用 this 之前调用”</strong></p>\n<p>💡 为什么呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* 在 JavaScript 中，【继承类的构造函数】（所谓的“派生构造器”，英文为 “derived constructor”）与其他函数之间是有区别的\n\n- 派生构造器具有特殊的内部属性 [[ConstructorKind]]:\"derived\"； // 这是一个特殊的内部标签\n\n\n该标签会【影响它的 new 行为】：\n\n  - 当通过 new 执行一个常规函数时，它将创建一个空对象，并将这个空对象赋值给 this ;\n\n  - 但是,当继承的 constructor 执行时，它不会执行此操作；\n\n  - 它期望父类的 constructor 来完成这项工作;\n\n\n* 因此，派生的 constructor 必须调用 super 才能执行其父类（base）的 constructor，否则 this 指向的那个对象将不会被创建</code></pre></div>\n<h3>重写类字段</h3>\n<p>😨 一个棘手的注意要点；可以重写方法，也可以重写字段：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"animal\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (*)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"rabbit\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// animal</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// animal</span>\n\n<span class=\"token comment\">// 两种情况下：new Animal() 和 new Rabbit()，在 (*) 行的 alert 都打印了 animal</span>\n\n<span class=\"token comment\">// 有点懵逼，用方法来进行比较：</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 而不是 this.name = 'animal'</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 而不是 alert(this.name);</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rabbit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// animal</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// rabbit</span>\n\n<span class=\"token comment\">// 请注意：这时的输出是不同的</span>\n\n<span class=\"token comment\">// 这才是本来所期待的结果。当父类构造器在派生的类中被调用时，它会使用被重写的方法；……但对于类字段并非如此。正如前文所述，父类构造器总是使用父类的字段</span></code></pre></div>\n<p>为什么会有这样的区别呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">原因在于类字段初始化的顺序:\n\n- 对于基类（还未继承任何东西的那种），在构造函数调用前初始化\n\n- 对于派生类，在 super() 后立刻初始化</code></pre></div>\n<p>”这种字段与方法之间微妙的区别只特定于 JavaScript;这种行为仅在一个被重写的字段被父类构造器使用时才会显现出来;可以通过使用方法或者 getter/setter 替代类字段，来修复这个问题”</p>\n<h3>静态方法</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">把一个方法赋值给类的函数本身，而不是赋给它的 \"prototype\"\n\n\n这样的方法被称为 静态的（static）</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 和作为属性赋值的作用相同</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">静态方法被用于实现属于整个类的功能;它与具体的类实例无关</code></pre></div>\n<h3>静态属性</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">静态属性类似静态方法</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> publisher <span class=\"token operator\">=</span> <span class=\"token string\">\"Levi Ding\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Article<span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Levi Ding</span>\n\n<span class=\"token comment\">// 等同于直接给 Article 赋值：</span>\n\nArticle<span class=\"token punctuation\">.</span>publisher <span class=\"token operator\">=</span> <span class=\"token string\">\"Levi Ding\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">静态属性被用于想要存储类级别的数据时，而不是绑定到实例</code></pre></div>\n<h3>继承静态属性和方法</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 静态属性和方法是可被继承的\n\n- 继承对常规方法和静态方法都有效</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> planet <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> speed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed <span class=\"token operator\">+=</span> speed<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> runs with speed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animalA<span class=\"token punctuation\">,</span> animalB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> animalA<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">-</span> animalB<span class=\"token punctuation\">.</span>speed<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 继承于 Animal</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> hides!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"White Rabbit\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Black Rabbit\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nrabbits<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>Rabbit<span class=\"token punctuation\">.</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrabbits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Black Rabbit runs with speed 5.</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Rabbit<span class=\"token punctuation\">.</span>planet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Earth</span></code></pre></div>\n<p>它是如何工作的？再次，使用原型 😱。extends 让 Rabbit 的 [[Prototype]] 指向了 Animal</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Rabbit extends Animal 创建了两个 [[Prototype]] 引用：\n\n- 1. Rabbit 函数原型继承自 Animal 函数\n\n- 2. Rabbit.prototype 原型继承自 Animal.prototype</code></pre></div>\n<p>校验</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rabbit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 对于静态的</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Rabbit<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 对于常规方法</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2>Babel 编译</h2>\n<p>之前已经对 <a href=\"https://www.shanejix.com/posts/Vanilla%20JavaScript%20Inherited/\">ES5 中继承</a> 有了深入的了解，Typescript、ES6 的代码会被编译成什么样子呢？可以在 Babel 官网的<a href=\"https://babeljs.io/repl/#?babili=false&#x26;evaluate=true&#x26;lineWrap=false&#x26;presets=es2015%2Creact%2Cstage-2&#x26;targets=&#x26;browsers=&#x26;builtIns=false&#x26;debug=false&#x26;code_lz=Q\">Try it out</a>页面查看</p>\n<p>es6</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译后</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_instanceof</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> Constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot call a class as a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> Person <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> <span class=\"token function\">_createClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>_classCallCheck 的作用是检查 Person 是否是通过 new 的方式调用，类必须使用 new 调用，否则会报错。当使用 var person = Person() 的形式调用的时候，this 指向 window，所以 instance instanceof Constructor 就会为 false</p>\n<p>这也片面的说明 class 不仅仅是 原型继承的语法糖</p>\n<p>es6</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, I am \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">onlySayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"shane\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new name 为：\"</span> <span class=\"token operator\">+</span> newName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译后</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _createClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> props<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> descriptor <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      descriptor<span class=\"token punctuation\">.</span>enumerable <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>enumerable <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      descriptor<span class=\"token punctuation\">.</span>configurable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span> <span class=\"token keyword\">in</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span>writable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span> protoProps<span class=\"token punctuation\">,</span> staticProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>protoProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> protoProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>staticProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">,</span> staticProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> Constructor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>instance <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot call a class as a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_createClass</span><span class=\"token punctuation\">(</span>\n    Person<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        key<span class=\"token operator\">:</span> <span class=\"token string\">\"sayHello\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, I am \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        key<span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">\"kevin\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new name 为：\"</span> <span class=\"token operator\">+</span> newName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        key<span class=\"token operator\">:</span> <span class=\"token string\">\"onlySayHello\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onlySayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>es6</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kevin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>编译后</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_possibleConstructorReturn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">self<span class=\"token punctuation\">,</span> call</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"this hasn't been initialised - super() hasn't been called\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> call <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> call <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> call <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> call\n    <span class=\"token operator\">:</span> self<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subClass<span class=\"token punctuation\">,</span> superClass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> superClass <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> superClass <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Super expression must either be null or a function, not \"</span> <span class=\"token operator\">+</span>\n        <span class=\"token keyword\">typeof</span> superClass\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  subClass<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>superClass <span class=\"token operator\">&amp;&amp;</span> superClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    constructor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> subClass<span class=\"token punctuation\">,</span>\n      enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span>setPrototypeOf\n      <span class=\"token operator\">?</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>subClass<span class=\"token punctuation\">,</span> superClass<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>subClass<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> superClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>instance <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot call a class as a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_Parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">,</span> _Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 调用父类的 constructor(name)</span>\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token function\">_possibleConstructorReturn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">||</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    _this<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kevin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>_inherits</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subClass<span class=\"token punctuation\">,</span> superClass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// extend 的继承目标必须是函数或者是 null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> superClass <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> superClass <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Super expression must either be null or a function, not \"</span> <span class=\"token operator\">+</span>\n        <span class=\"token keyword\">typeof</span> superClass\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 类似于 ES5 的寄生组合式继承，</span>\n  <span class=\"token comment\">// 使用 Object.create，设置子类 prototype 属性的 __proto__ 属性指向父类的 prototype 属性</span>\n  <span class=\"token comment\">// 并给子类添加一个可配置可写不可枚举的 constructor 属性，该属性值为 subClass</span>\n  subClass<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>superClass <span class=\"token operator\">&amp;&amp;</span> superClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    constructor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> subClass<span class=\"token punctuation\">,</span>\n      enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 设置子类的 __proto__ 属性指向父类</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span>setPrototypeOf\n      <span class=\"token operator\">?</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>subClass<span class=\"token punctuation\">,</span> superClass<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>subClass<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> superClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Object.create() 的第二个参数表示要添加到新创建对象的属性</p>\n<h3>_possibleConstructorReturn</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">_possibleConstructorReturn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">self<span class=\"token punctuation\">,</span> call</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"this hasn't been initialised - super() hasn't been called\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> call <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> call <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> call <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> call\n    <span class=\"token operator\">:</span> self<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为啥要判断 parent return 呢？ 因为 在 constructor 函数中可以 return 例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xxx <span class=\"token operator\">=</span> xxx<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 没有显示的 return 默认 return undefined</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 可以 return 各种类型 比如 null</span></code></pre></div>\n<p>总体实现</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_Parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">,</span> _Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token function\">_possibleConstructorReturn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">||</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    _this<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>首先执行 _inherits(Child, Parent)，建立 Child 和 Parent 的原型链关系，即 <strong>Object.setPrototypeOf(Child.prototype, Parent.prototype) 和 Object.setPrototypeOf(Child, Parent)</strong></li>\n<li>然后调用 Parent.call(this, name)，根据 Parent 构造函数的返回值类型确定子类构造函数 this 的初始值 _this</li>\n<li>最终，根据子类构造函数，修改 _this 的值，然后返回该值</li>\n</ol>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://zh.javascript.info/classes\">https://zh.javascript.info/classes</a></li>\n<li><a href=\"https://www.shanejix.com/posts/%E7%8E%B0%E4%BB%A3%20JavaScript%20%E6%95%99%E7%A8%8B%20%E2%80%94%20JavaScript%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/\">https://www.shanejix.com/posts/%E7%8E%B0%E4%BB%A3%20JavaScript%20%E6%95%99%E7%A8%8B%20%E2%80%94%20JavaScript%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/</a></li>\n<li><a href=\"https://www.cnblogs.com/shanejix/p/15220858.html#class-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\">https://www.cnblogs.com/shanejix/p/15220858.html#class-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95</a></li>\n<li><a href=\"https://www.cnblogs.com/shanejix/p/15220858.html#%E7%B1%BB%E7%BB%A7%E6%89%BF\">https://www.cnblogs.com/shanejix/p/15220858.html#%E7%B1%BB%E7%BB%A7%E6%89%BF</a></li>\n<li><a href=\"https://www.cnblogs.com/shanejix/p/15220858.html#%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\">https://www.cnblogs.com/shanejix/p/15220858.html#%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/105\">https://github.com/mqyqingfeng/Blog/issues/105</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/106\">https://github.com/mqyqingfeng/Blog/issues/106</a></li>\n<li><a href=\"https://babeljs.io/repl/#?browsers=&#x26;build=&#x26;builtIns=false&#x26;corejs=3.21&#x26;spec=false&#x26;loose=false&#x26;code_lz=Q&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=true&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=false&#x26;presets=es2015&#x26;prettier=false&#x26;targets=&#x26;version=7.17.6&#x26;externalPlugins=&#x26;assumptions=%7B%7D\">https://babeljs.io/repl/#?browsers=&#x26;build=&#x26;builtIns=false&#x26;corejs=3.21&#x26;spec=false&#x26;loose=false&#x26;code_lz=Q&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=true&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=false&#x26;presets=es2015&#x26;prettier=false&#x26;targets=&#x26;version=7.17.6&#x26;externalPlugins=&#x26;assumptions=%7B%7D</a></li>\n</ul>\n<blockquote>\n<p>作者：<a href=\"https://www.shanejix.com/\">shanejix</a>\n出处：<a href=\"https://www.shanejix.com/posts/TypeScript%20-%20ES6%20%E4%B8%AD%E7%9A%84%20Class%20%E7%BB%A7%E6%89%BF/\">https://www.shanejix.com/posts/TypeScript - ES6 中的 Class 继承/</a>\n版权：本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">「署名-非商业性使用-相同方式共享 4.0 国际」</a>许可协议进行许可。\n声明：转载请注明出处！</p>\n</blockquote>","frontmatter":{"title":"TypeScript - ES6 中的 Class 继承","date":"November 13, 2021","update":"April 12, 2022","url":"https://github.com/shanejix/shanejix.github.io/issues/80"}}},"pageContext":{"slug":"/TypeScript - ES6 中的 Class 继承/","previous":{"fields":{"slug":"/浅析：现代 Web 开发困局/"},"frontmatter":{"title":"浅析：现代 Web 开发困局","tags":["Web"]}},"next":{"fields":{"slug":"/npm ERR! 404 Not Found - Scope not found/"},"frontmatter":{"title":"npm ERR! 404 Not Found - Scope not found","tags":["Bug"]}}}},"staticQueryHashes":["3159585216","63159454"]}