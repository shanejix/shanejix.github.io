{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/Promises implementation with ES6 class/","result":{"data":{"site":{"siteMetadata":{"title":"shanejix","description":"learner && coder"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9dd4013c-c308-552c-bd2c-04f0cd996599","timeToRead":5}},{"node":{"id":"d29bf37d-75f0-501e-92b1-42c06cdbcd7b","timeToRead":3}},{"node":{"id":"89619e78-eeef-5342-b7fe-7626ee925f57","timeToRead":9}},{"node":{"id":"cb3a4052-202e-5a46-bf15-4e9b30e34ebf","timeToRead":3}},{"node":{"id":"45c6b07a-fc6a-5800-9907-86a94c1f4ace","timeToRead":2}},{"node":{"id":"db38bc53-9935-56f0-a9e2-0be373990d78","timeToRead":3}},{"node":{"id":"1dcfd849-d044-5c73-b31a-5fd30393f430","timeToRead":14}},{"node":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","timeToRead":15}},{"node":{"id":"d15e9143-f799-527d-b71d-2b8fc195817c","timeToRead":12}},{"node":{"id":"ba521381-a518-5686-a682-0ada55a7dd73","timeToRead":4}},{"node":{"id":"ba58ecad-907f-5ad2-bc26-9167d7607dcc","timeToRead":12}},{"node":{"id":"08b71346-abf3-5649-84f5-2f8ae4f48c6a","timeToRead":3}},{"node":{"id":"da55e002-3a8a-5af2-929e-4de7e3a8d314","timeToRead":4}},{"node":{"id":"4e56b6de-c0ca-572e-9f9d-e769592aa49b","timeToRead":2}},{"node":{"id":"af002700-632d-547f-82b9-f31919d4f03e","timeToRead":1}},{"node":{"id":"7b6d671f-8de2-5511-91e9-0797db813dc7","timeToRead":1}},{"node":{"id":"ad4fad45-b734-560c-8324-a9708e1e04c4","timeToRead":1}},{"node":{"id":"ef84ef13-dac8-5cfa-ac69-d0ea44f677f1","timeToRead":2}},{"node":{"id":"69026b7f-ca1c-5eea-8f61-76972396800c","timeToRead":2}},{"node":{"id":"52b13183-db66-5637-bc21-c828b8dabddd","timeToRead":8}},{"node":{"id":"14bde951-d8e7-5045-84f7-dd9479cfafc3","timeToRead":35}},{"node":{"id":"aa4d72c6-d675-52e4-a55b-b07237ed0e1a","timeToRead":2}},{"node":{"id":"eb631c0f-69a5-5ca8-b3c7-1baaed014eea","timeToRead":1}},{"node":{"id":"684d2035-e385-577d-bb53-f7bfca2caa0d","timeToRead":18}},{"node":{"id":"a40d34f8-b202-5f5b-8c33-19c7c163bbce","timeToRead":5}},{"node":{"id":"afc44728-7e4f-5ce3-bf62-373400a8a46a","timeToRead":12}},{"node":{"id":"ca3cc4cf-0ddf-5fb3-a58d-2354b2f0a10e","timeToRead":5}},{"node":{"id":"fe7fd5be-04af-5d1a-b969-f8f4de7db655","timeToRead":1}},{"node":{"id":"fb3bc99d-cf2f-5fbd-981d-1d701815f87b","timeToRead":66}},{"node":{"id":"4de1fb79-73c7-5593-adc3-427351c465e9","timeToRead":101}},{"node":{"id":"9a102758-e412-5f31-8753-54534e8fdb15","timeToRead":1}},{"node":{"id":"a07217e5-4cbe-54e4-9566-2a0df732a1a4","timeToRead":1}},{"node":{"id":"c8a73065-3214-5616-93f3-0df2a119e91d","timeToRead":1}}]},"markdownRemark":{"id":"7b38ed3c-4032-581a-aab4-bda6dcb8fa78","excerpt":"同步链接: https://www.shanejix.com/posts/Promises implementation with ES6 class/ 本文参考  规范实现 ,等功能，如不了解 请参考《Promise 必知必会》。更具体的  规范见这里 demo…","html":"<blockquote>\n<p>同步链接: <a href=\"https://www.shanejix.com/posts/Promises%20implementation%20with%20ES6%20class/\">https://www.shanejix.com/posts/Promises implementation with ES6 class/</a></p>\n</blockquote>\n<p>本文参考 <code class=\"language-text\">Promises/A+</code> 规范实现 <code class=\"language-text\">new Promise()</code>,<code class=\"language-text\">.then()</code>等功能，如不了解 <code class=\"language-text\">Promise</code>请参考<a href=\"https://www.shanejix.com/posts/Promise%20%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/\">《Promise 必知必会》</a>。更具体的 <code class=\"language-text\">Promises/A+</code> 规范见<a href=\"https://promisesaplus.com/\">这里</a></p>\n<h2>demo</h2>\n<p>看一个测试代码<code class=\"language-text\">test.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// write your code here</span>\n\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* executor */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// expected output: \"foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// expected output: [object Promise]</span></code></pre></div>\n<p>期望的<code class=\"language-text\">test.js</code>执行阶段</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出日志如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise <span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n\nfoo</code></pre></div>\n<p>但是这样不能明显的发现问题，修改<code class=\"language-text\">test.js</code>如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>期望的<code class=\"language-text\">test.js</code>执行阶段</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>输出日志如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Promise <span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>fulfilled<span class=\"token operator\">></span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span>\n\nfoo</code></pre></div>\n<p>这样问题就很明显了：我们期望的是在 执行<code class=\"language-text\">rosolve()</code>之前就拿到 <code class=\"language-text\">promise1.then()</code>中的回调函数 - 这就是<code class=\"language-text\">Promise</code>实现异步操作的<strong>关键</strong>之处了</p>\n<h2>new Promise()</h2>\n<p>如何实现？</p>\n<p><code class=\"language-text\">Promise</code>基本的使用</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// write your code here</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* executor*/</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>干了什么</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>. Promise构造函数执行时会调用 executor 函数\n\n<span class=\"token number\">2</span>. resolve 和 reject 两个内部函数作为参数传递给 executor</code></pre></div>\n<p>实现<code class=\"language-text\">new Promise()</code> 的<strong>构造函数框架</strong>如下（标准中没有指定构造函数的具体行为）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义三个状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Promise 构造函数接收一个 executor 函数，\n   * executor 函数执行完同步或异步操作后，调用它的两个参数 resolve 和 reject\n   * @param {*} executor\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2.1. Promise 的状态</span>\n    <span class=\"token comment\">// Promise 必须处于以下三种状态之一：pending，fulfilled 或者 rejected。</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2.2.6.1. 如果 promise 处于 fulfilled 状态，所有相应的 onFulfilled 回调必须按照它们对应的 then 的原始调用顺序来执行</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulfilledCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.2.6.2. 如果 promise 处于 rejected 状态，所有相应的 onRejected 回调必须按照它们对应的 then 的原始调用顺序来执行。</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 成功之后的值</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 失败之后的原因</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 更改成功后的状态\n     * @param {*} value\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// todo</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 更改失败后的状态\n     * @param {*} reason\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// todo</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 传入的函数可能也会执行异常，所以这里用 try...catch 包裹</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// executor 是一个执行器，进入会立即执行,并传入resolve和reject方法</span>\n      <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">;</span></code></pre></div>\n<p>实现 <code class=\"language-text\">resolve</code>和 <code class=\"language-text\">reject</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义三个状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Promise 构造函数接收一个 executor 函数，\n   * executor 函数执行完同步或异步操作后，调用它的两个参数 resolve 和 reject\n   * @param {*} executor\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2.1. Promise 的状态</span>\n    <span class=\"token comment\">// Promise 必须处于以下三种状态之一：pending，fulfilled 或者 rejected。</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2.2.6.1. 如果 promise 处于 fulfilled 状态，所有相应的 onFulfilled 回调必须按照它们对应的 then 的原始调用顺序来执行</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulfilledCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.2.6.2. 如果 promise 处于 rejected 状态，所有相应的 onRejected 回调必须按照它们对应的 then 的原始调用顺序来执行。</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 成功之后的值</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 失败之后的原因</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 更改成功后的状态\n     * @param {*} value\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.1.1. 当 Promise 处于 pending 状态时：</span>\n      <span class=\"token comment\">// 2.1.1.1. 可以转换到 fulfilled 或 rejected 状态。</span>\n      <span class=\"token comment\">// 2.1.2. 当 Promise 处于 fulfilled 状态时：</span>\n      <span class=\"token comment\">// 2.1.2.1. 不得过渡到任何其他状态。</span>\n      <span class=\"token comment\">// 2.1.2.2. 必须有一个不能改变的值。</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 状态修改为成功</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">FULFILLED</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 保存成功之后的值</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.2.6.1. 如果 promise 处于 fulfilled 状态，所有相应的 onFulfilled 回调必须按照它们对应的 then 的原始调用顺序来执行。</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulfilledCallbacks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulfilledCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 更改失败后的状态\n     * @param {*} reason\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.1.1. 当 Promise 处于 pending 状态时：</span>\n      <span class=\"token comment\">// 2.1.1.1. 可以转换到 fulfilled 或 rejected 状态。</span>\n      <span class=\"token comment\">// 2.1.3. 当 Promise 处于 rejected 状态时：</span>\n      <span class=\"token comment\">// 2.1.2.1. 不得过渡到任何其他状态。</span>\n      <span class=\"token comment\">// 2.1.2.2. 必须有一个不能改变的值。</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 状态成功为失败</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">REJECTED</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 保存失败后的原因</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> reason<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.2.6.2. 如果 promise 处于 rejected 状态，所有相应的 onRejected 回调必须按照它们对应的 then 的原始调用顺序来执行。</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedCallbacks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 传入的函数可能也会执行异常，所以这里用 try...catch 包裹</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// executor 是一个执行器，进入会立即执行,并传入resolve和reject方法</span>\n      <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里需要注意一个细节：多个 <code class=\"language-text\">.then()</code>添加到同一个 <code class=\"language-text\">promise</code>上</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>这就是 **`</strong>onFulfilledCallbacks<strong>`</strong>和 <strong>`</strong>onRejectedCallbacks<strong>`</strong>被处理得为数组得原因**</p>\n<h2>.then()</h2>\n<p>根据 <code class=\"language-text\">demo</code>中的启发：<code class=\"language-text\">**promise.then()**</code><strong>用来注册在这个 Promise 状态确定后的回调。</strong>需要注意的几点</p>\n<ul>\n<li>很明显<code class=\"language-text\">.then()</code>方法需要写在原型链上</li>\n<li>在<code class=\"language-text\">Promise/A+</code>标准中明确<code class=\"language-text\">.then()</code>返回一个新对象（<a href=\"https://promisesaplus.com/differences-from-promises-a#point-5\">详情</a>），<code class=\"language-text\">Promise</code>实现中几乎都是返回一个<strong>新的</strong><code class=\"language-text\">**Promise**</code><strong>对象</strong></li>\n</ul>\n<p>实现<code class=\"language-text\">**then()**</code>**方法框架 **如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义三个状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Promise 构造函数接收一个 executor 函数，\n   * executor 函数执行完同步或异步操作后，调用它的两个参数 resolve 和 reject\n   * @param {*} executor\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * then方法接收两个参数，onResolved，onRejected，分别为Promise成功或失败后的回调\n   * @param {*} onResolved\n   * @param {*} onRejected\n   * @returns\n   */</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> promise2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 根据标准，如果then的参数不是function，则需要忽略它，此处以如下方式处理</span>\n    onResolved <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> onResolved <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onResolved</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">;</span>\n    onRejected <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n        <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> r<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// todo</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// todo</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// todo</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>后续扩展发现，如下<code class=\"language-text\">then</code>的结构更灵活：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义三个状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Promise 构造函数接收一个 executor 函数，\n   * executor 函数执行完同步或异步操作后，调用它的两个参数 resolve 和 reject\n   * @param {*} executor\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * then方法接收两个参数，onResolved，onRejected，分别为Promise成功或失败后的回调\n   * @param {*} onResolved\n   * @param {*} onRejected\n   * @returns\n   */</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据标准，如果then的参数不是function，则需要忽略它，此处以如下方式处理</span>\n    onResolved <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> onResolved <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onResolved</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">;</span>\n    onRejected <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n        <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> r<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// todo</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// todo</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// todo</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> promise2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>三种状态下的 <code class=\"language-text\">Promise</code>都会返回 <code class=\"language-text\">new Promise()</code>。返回的 <code class=\"language-text\">promise2</code>的状态如何确定呢？</p>\n<p>看个例子</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> promise1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sth went wrong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>根据标准,上述代码,<code class=\"language-text\">promise2</code>的值取决于<code class=\"language-text\">then</code>里面函数的返回值:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">-</span> 如果 promise1 被 resolve 了，promise2 的将被 4 resolve，\n\n<span class=\"token list punctuation\">-</span> 如果 promise1 被 reject 了，promise2 将被 new Error('sth went wrong') reject，</code></pre></div>\n<p>所以，需要<strong>在 then 内部执行 onResolved 或者 onRejected，并根据返回值(标准中记为 x)来确定 promise2 的结果。</strong>并且，<strong>如果 onResolved/onRejected 返回的是一个 Promise，promise2 将直接取这个 Promise 的结果.</strong></p>\n<p>具体实现</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义三个状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FULFILLED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Promise 构造函数接收一个 executor 函数，\n   * executor 函数执行完同步或异步操作后，调用它的两个参数 resolve 和 reject\n   * @param {*} executor\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 2.2. then 方法\n   * 一个 promise 必须提供一个 then 方法来访问其当前值或最终值或 rejected 的原因。\n   * 一个 promise 的 then 方法接受两个参数：\n   * promise.then(onFulfilled, onRejected)\n   * @param {*} onFulfilled\n   * @param {*} onRejected\n   * @returns\n   */</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2.2.1. onFulfilled 和 onRejected 都是可选参数：</span>\n    <span class=\"token comment\">// 2.2.1.1. 如果 onFulfilled 不是一个函数，它必须被忽略。</span>\n    <span class=\"token comment\">// 2.2.7.3. 如果 onFulfilled 不是一个函数且 promise1 为 fulfilled 状态，promise2 必须用和 promise1 一样的值来变为 fulfilled 状态。</span>\n    onFulfilled <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> onFulfilled <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onFulfilled</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2.2.1. onFulfilled 和 onRejected 都是可选参数：</span>\n    <span class=\"token comment\">// 2.2.1.2. 如果 onRejected 不是一个函数，它必须被忽略。</span>\n    <span class=\"token comment\">// 2.2.7.4. 如果 onRejected 不是一个函数且 promise1 为 rejected 状态，promise2 必须用和 promise1 一样的 reason 来变为 rejected 状态。</span>\n    onRejected <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n        <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> reason<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2.2.7. then 必须返回一个 promise</span>\n    <span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fulfilledMicrotask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 2.2.4. onFulfilled 或 onRejected 在执行上下文堆栈仅包含平台代码之前不得调用。</span>\n        <span class=\"token comment\">// 3.1. 这可以通过“宏任务”机制（例如 setTimeout 或 setImmediate）或“微任务”机制（例如 MutationObserver 或 process.nextTick）来实现。</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2.2.2.1. onFulfilled 必须在 promise 的状态变为 fulfilled 后被调用，并将 promise 的值作为它的第一个参数。</span>\n            <span class=\"token comment\">// 2.2.5. onFulfilled 和 onRejected 必须作为函数调用。</span>\n            <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 2.2.7.1. 如果 onFulfilled 或 onRejected 返回了一个值 x，则运行 Promise 处理程序 [[Resolve]](promise2, x)。</span>\n            <span class=\"token function\">promiseResolutionHandler</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2.2.7.2. 如果 onFulfilled 或 onRejected 抛出了一个异常，promise2 必须用 e 作为 reason 来变为 rejected 状态。</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rejectedMicrotask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 2.2.4. onFulfilled 或 onRejected 在执行上下文堆栈仅包含平台代码之前不得调用。</span>\n        <span class=\"token comment\">// 3.1. 这可以通过“宏任务”机制（例如 setTimeout 或 setImmediate）或“微任务”机制（例如 MutationObserver 或 process.nextTick）来实现。</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2.2.3.1. 它必须在 promise 的状态变为 rejected 后被调用，并将 promise 的 reason 作为它的第一个参数。</span>\n            <span class=\"token comment\">// 2.2.5. onFulfilled 和 onRejected 必须作为函数调用。</span>\n            <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 2.2.7.1. 如果 onFulfilled 或 onRejected 返回了一个值 x，则运行 Promise 处理程序 [[Resolve]](promise2, x)。</span>\n            <span class=\"token function\">promiseResolutionHandler</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2.2.7.2. 如果 onFulfilled 或 onRejected 抛出了一个异常，promise2 必须用 e 作为 reason 来变为 rejected 状态。</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 2.2.2. 如果 onFulfilled 是一个函数:</span>\n      <span class=\"token comment\">// 2.2.2.1. 它必须在 promise 的状态变为 fulfilled 后被调用，并将 promise 的值作为它的第一个参数。</span>\n      <span class=\"token comment\">// 2.2.2.2. 它一定不能在 promise 的状态变为 fulfilled 前被调用。</span>\n      <span class=\"token comment\">// 2.2.2.3. 它最多只能被调用一次。</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">FULFILLED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果promise1(此处即为this)的状态已经确定并且是fulfilled，调用 resolvedMicrotask</span>\n        <span class=\"token function\">fulfilledMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 2.2.3. 如果 onRejected 是一个函数，</span>\n      <span class=\"token comment\">// 2.2.3.1. 它必须在 promise 的状态变为 rejected 后被调用，并将 promise 的 reason 作为它的第一个参数。</span>\n      <span class=\"token comment\">// 2.2.3.2. 它一定不能在 promise 的状态变为 rejected 前被调用。</span>\n      <span class=\"token comment\">// 2.2.3.3. 它最多只能被调用一次。</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">REJECTED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果promise1(此处即为this)的状态已经确定并且是rejected，调用 rejectedMicrotask</span>\n        <span class=\"token function\">rejectedMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 2.2.6. then 可能会被同一个 promise 多次调用。</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">PENDING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果当前的Promise还处于pending状态，并不能确定调用onResolved还是onRejected，</span>\n        <span class=\"token comment\">// 只能等到Promise的状态确定后，才能确实如何处理</span>\n        <span class=\"token comment\">// 所以需要把**两种情况**的处理逻辑做为callback放入promise1(此处即this)的回调数组里</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFulfilledCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fulfilledMicrotask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejectedCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>rejectedMicrotask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> promise2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">promiseResolutionHandler</code>集中处理程序</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 2.3. Promise 处理程序\n * Promise 处理程序是一个将 promise2 和 value 作为输入的抽象操作，将其表示为 [[Resolve]](promise2, x)。\n * 补充说明：这里将 resolve 和 reject 也传入进来，因为后续要根据不同的逻辑对 promise2 执行 fulfill 或 reject 操作。\n * @param {*} promise2\n * @param {*} x\n * @param {*} resolve\n * @param {*} reject\n * @returns\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">promiseResolutionHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 2.3.1. 如果 promise2 和 x 引用的是同一个对象，promise2 将以一个 TypeError 作为 reason 来进行 reject。</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promise2 <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chaining cycle detected for promise\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   \n  // 与 2.3.3 有重叠部分\n\n  // 2.3.2. 如果 x 是一个 Promise，根据它的状态：\n  if (x instanceof Promise) {\n    // 2.3.2.1. 如果 x 的状态为 pending，Promise 必须保持 pending 状态直到 x 的状态变为 fulfilled 或 rejected。\n    if (x.state === \"pending\") {\n      x.then(\n        (value) => {\n          promiseResolutionHandler(promise2, value, resolve, reject);\n        },\n        reject\n      );\n    } else if (x.state === \"fulfilled\") {\n      // 2.3.2.2. 如果 x 的状态为 fulfilled，那么 promise2 也用同样的值来执行 fulfill 操作。\n      resolve(x.data);\n    } else if (x.state === \"rejected\") {\n      // 2.3.2.3. 如果 x 的状态为 rejected，那么 promise2 也用同样的 reason 来执行 reject 操作。\n      reject(x.data);\n    }\n    return;\n  }\n\n  */</span>\n\n  <span class=\"token comment\">// 2.3.3. 除此之外，如果 x 是一个对象或者函数，</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果 x 是 null，直接 resolve</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 2.3.3.3.3. 如果 resolvePromise 和 rejectPromise 都被调用，或者多次调用同样的参数，则第一次调用优先，任何之后的调用都将被忽略。</span>\n    <span class=\"token keyword\">let</span> isCalled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.3.3.1. 声明一个 then 变量来保存 then</span>\n      <span class=\"token keyword\">let</span> then <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>then<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 2.3.3.3. 如果 then 是一个函数，将 x 作为 this 来调用它，第一个参数为 resolvePromise，第二个参数为 rejectPromise，其中：</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> then <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">then</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n            x<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 2.3.3.3.1. 假设 resolvePromise 使用一个名为 y 的值来调用，运行 Promise 处理程序 [[Resolve]](promise, y)。</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// 2.3.3.3.3. 如果 resolvePromise 和 rejectPromise 都被调用，或者多次调用同样的参数，则第一次调用优先，任何之后的调用都将被忽略。</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCalled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n              isCalled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              <span class=\"token function\">promiseResolutionHandler</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 2.3.3.3.2. 假设 rejectPromise 使用一个名为 r 的 reason 来调用，则用 r 作为 reason 对 promise2 执行 reject 操作。</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">rejectPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCalled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n              isCalled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 2.3.3.3.4. 如果调用 then 时抛出一个异常 e，</span>\n          <span class=\"token comment\">// 2.3.3.3.4.1. 如果 resolvePromise 或 rejectPromise 已经被调用过了，则忽略异常。</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCalled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\">// 2.3.3.3.4.2. 否则，使用 e 作为 reason 对 promise2 执行 reject 操作。</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 2.3.3.4. 如果 then 不是一个函数，使用 x 作为值对 promise2 执行 fulfill 操作。</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2.3.3.2. 如果检索 x.then 的结果抛出异常 e，使用 e 作为 reason 对 promise2 执行 reject 操作。</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2.3.4. 如果 x 不是一个对象或者函数，使用 x 作为值对 promise2 执行 fulfill 操作。</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>至此就完成了<code class=\"language-text\">then()</code>的实现，需要引起注意的地方：</p>\n<p>注意点一：可以看出同步任务不涉及 callback 的存储，异步任务会先进入宏任务队列，会在 JS 主栈空闲时执行存储的 callback， 核心实现其实就是——<strong>发布订阅模式</strong></p>\n<p>注意点二：<strong>链式调用</strong>的核心就是<code class=\"language-text\">.then()</code> 返回一个新的 <code class=\"language-text\">Promise</code></p>\n<p>注意点三：<code class=\"language-text\">**Promise**</code><strong>值穿透</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 片段一</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 片段二</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> reason<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>片段一和片段二效果应该一样，<strong>如果</strong><code class=\"language-text\">**then()**</code><strong>的实参留空且让值可以穿透到后面,只需要给</strong><code class=\"language-text\">**then()**</code><strong>的两个参数设定默认值即可</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">onResolved <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> onResolved <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n    <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onResolved</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nonRejected <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> onRejected <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n    <span class=\"token operator\">?</span> <span class=\"token function-variable function\">onRejected</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> reason<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意点四：**thenable 的核心逻辑 **参考<code class=\"language-text\">promiseResolutionHandler</code>集中处理程序</p>\n<h2>.catch()</h2>\n<p>其实就是<code class=\"language-text\">.then(null,()=>()}</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n   * catch方法\n   * @param {*} onRejected\n   * @returns\n   */</span>\n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Promise.all()</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n   * Promise.all()方法\n   * @param {*} promiseArr\n   * @returns\n   */</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promiseArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 记录成功的数量</span>\n      <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 记录成功的结果</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> promiseArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        promiseArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保证结果的顺序和数组顺序一致</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> promiseArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>小结</h2>\n<p>社区有很多实现，包括一些三方库的实现，还有其他语言基于 Promises/A+ 的实现：<a href=\"https://promisesaplus.com/implementations\">https://promisesaplus.com/implementations</a></p>\n<p>完整版实现：<a href=\"https://github.com/shanejix/front-end-playground/blob/master/javascript/implement-promise/promise.js\">https://github.com/shanejix/front-end-playground/blob/master/javascript/implement-promise/promise.js</a></p>\n<p>测试结果：\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/377147/1644651062846-34a5ae79-204e-46d4-99db-7722f9b834c1.png#clientId=u18c521ad-d215-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=329&#x26;id=u5e42da31&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=411&#x26;originWidth=1222&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=45756&#x26;status=done&#x26;style=none&#x26;taskId=u0ff89010-ce70-43cc-99d7-76f67077cb0&#x26;title=&#x26;width=977.6\" alt=\"image.png\"></p>\n<p><code class=\"language-text\">new Promise()</code>处理同步任务和异步任务有所区别：同步任务会立即 <code class=\"language-text\">resolve()</code>掉并修改 当前 promise 的状态。异步任务会预先存储 <code class=\"language-text\">callback</code>(订阅事件）,然后等待时机<code class=\"language-text\">resolve()</code> 掉 当前 promise ，核心思想就是 **发布订阅模式 **。</p>\n<p><code class=\"language-text\">.then()</code>默认返回一个新的 promise ：这是 promise 实现 **链式调用 **的核心</p>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://promisesaplus.com/\">https://promisesaplus.com/</a></li>\n<li><a href=\"https://github.com/promises-aplus/promises-tests\">https://github.com/promises-aplus/promises-tests</a></li>\n<li><a href=\"https://www.shanejix.com/posts/Promise%20%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/\">https://www.shanejix.com/posts/Promise%20%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</a></li>\n<li><a href=\"https://github.com/xieranmaya/blog/issues/3\">https://github.com/xieranmaya/blog/issues/3</a></li>\n<li><a href=\"https://juejin.cn/post/6945319439772434469\">https://juejin.cn/post/6945319439772434469</a></li>\n<li><a href=\"http://febook.hzfe.org/awesome-interview/book1/coding-promise\">http://febook.hzfe.org/awesome-interview/book1/coding-promise</a></li>\n</ul>\n<blockquote>\n<p>作者：<a href=\"https://www.shanejix.com/\">shanejix</a>\n出处：<a href=\"https://www.shanejix.com/posts/Promises%20implementation%20with%20ES6%20class/\">https://www.shanejix.com/posts/Promises implementation with ES6 class/</a>\n版权：本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">「署名-非商业性使用-相同方式共享 4.0 国际」</a>许可协议进行许可。\n声明：转载请注明出处！</p>\n</blockquote>","frontmatter":{"title":"Promises implementation with ES6 class","date":"August 09, 2019","update":"April 12, 2022","url":"https://github.com/shanejix/shanejix.github.io/issues/14"}}},"pageContext":{"slug":"/Promises implementation with ES6 class/","previous":{"fields":{"slug":"/Vanilla JavaScript Inherited/"},"frontmatter":{"title":"Vanilla JavaScript Inherited","tags":["JavaScript"]}},"next":{"fields":{"slug":"/Implementation Axios/"},"frontmatter":{"title":"Implementation Axios","tags":["Aixos"]}}}},"staticQueryHashes":["3159585216","63159454"]}