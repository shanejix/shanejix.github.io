{"version":3,"sources":["webpack:///./src/templates/posts-pagination.js"],"names":["postsPagination","props","data","pageContext","totalPage","currentPage","limit","skip","siteTitle","site","siteMetadata","title","siteDescription","description","nodes","allMarkdownRemark","allMarkdownFile","edges","postsNodesSlugs","filter","node","fileAbsolutePath","includes","map","fields","slug","posts","item","slice","htmlAttributes","lang","meta","name","content","style","borderRadius","paddingTop","marginBottom","fontSize","post","idx","frontmatter","date","update","tags","url","comments","timeToRead","key","postUrl","display","flexWrap","justifyContent","listStyle","padding","marginTop","paddingBottom","to","rel"],"mappings":"8FAAA,6FA+GeA,UAvGS,SAAAC,GACtB,IAAQC,EAASD,EAATC,KACR,EAAgDD,EAAME,YAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YAAaC,EAAhC,EAAgCA,MAAOC,EAAvC,EAAuCA,KAEjCC,EAAYN,EAAKO,KAAKC,aAAaC,MACnCC,EAAkBV,EAAKO,KAAKC,aAAaG,YAEzCC,EAAQZ,EAAKa,kBAAkBD,MAE/BE,EAAkBd,EAAKa,kBAAkBE,MAEzCC,EAAkBJ,EACrBK,QAAO,SAAAC,GAAI,OAAKA,EAAKC,iBAAiBC,SAAS,iBAC/CC,KAAI,SAAAH,GAAI,OAAIA,EAAKI,OAAOC,QAMrBC,EADWV,EAAgBG,QAAO,SAAAQ,GAAI,OAAIT,EAAgBI,SAASK,EAAKP,KAAKI,OAAOC,SACnEG,MAAMrB,EAAMA,EAAOD,GAE1C,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKK,MAAO,mBAAoBE,YAAa,qBAC7C,YAAC,IAAD,CACEgB,eAAgB,CAAEC,KAAM,MACxBC,KAAM,CAAC,CAAEC,KAAM,cAAeC,QAASrB,IACvCD,MAAOH,IAET,uBACE0B,MAAO,CAELC,aAAa,MAEbC,WAAY,OACZC,aAAa,SAEbC,SAAS,SAGX,2BAEIZ,EAAMH,KAAI,SAACgB,EAAMC,GACf,IAAQpB,EAASmB,EAATnB,KACFT,EAAQS,EAAKqB,YAAY9B,OAASS,EAAKI,OAAOC,KAC9CiB,EAAOtB,EAAKqB,YAAYC,KACxBC,EAASvB,EAAKqB,YAAYE,OAC1BlB,EAAOL,EAAKI,OAAOC,KACnBmB,EAAOxB,EAAKqB,YAAYG,MAAQ,GAChCC,EAAMzB,EAAKqB,YAAYI,KAAO,GAC9BC,EAAW1B,EAAKqB,YAAYK,SAC5BC,EAAa3B,EAAK2B,WAExB,OACE,YAAC,IAAD,CACEC,IAAKR,EACL7B,MAAOA,EACP+B,KAAMA,EACNC,OAAQA,EACRlB,KAAMA,EACNmB,KAAMA,EACNK,QAASJ,EACTC,SAAUA,EACVC,WAAYA,QAMtB,uBACEb,MAAO,CACLgB,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,EACTC,UAAW,OACXC,cAAe,SAGjB,uBACGnD,EAAc,EAAI,GACjB,YAAC,OAAD,CACEoD,GAAI,WAAapD,EAAc,GAAM,EAAI,GAAKA,EAAc,GAC5DqD,IAAI,QAFN,UAQJ,uBACGrD,EAAc,GAAKD,GAClB,YAAC,OAAD,CAAMqD,GAAI,WAAapD,EAAc,GAAIqD,IAAI,QAA7C","file":"component---src-templates-posts-pagination-js-f887a69f275fa18320d2.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n// https://www.npmjs.com/package/react-helmet\nimport Helmet from \"react-helmet\"\nimport Layout from \"../components/layout\"\nimport CrayonsStory from \"../components/crayons-story\"\nimport SEO from \"../components/seo\"\n\nconst postsPagination = props => {\n  const { data } = props\n  const { totalPage, currentPage, limit, skip } = props.pageContext\n\n  const siteTitle = data.site.siteMetadata.title\n  const siteDescription = data.site.siteMetadata.description\n  // all nodes\n  const nodes = data.allMarkdownRemark.nodes;\n  // all posts contain /posts/*.md and /src/pages/*.md\n  const allMarkdownFile = data.allMarkdownRemark.edges\n\n  const postsNodesSlugs = nodes\n    .filter(node => !node.fileAbsolutePath.includes('src/pages/'))\n    .map(node => node.fields.slug);\n\n  // all /src/pages/*md pages\n  // const pages = allMarkdownFile.filter(item => pagesNodesSlugs.includes(item.node.fields.slug))\n  // all /posts/*.md posts\n  const allPosts = allMarkdownFile.filter(item => postsNodesSlugs.includes(item.node.fields.slug));\n  const posts = allPosts.slice(skip, skip + limit);\n\n  return (\n    <Layout>\n      <SEO title={'posts-pagination'} description={'posts-pagination'} />\n      <Helmet\n        htmlAttributes={{ lang: \"en\" }}\n        meta={[{ name: \"description\", content: siteDescription }]}\n        title={siteTitle}\n      />\n      <article\n        style={{\n          // border: `1px solid black`,\n          borderRadius: `3px`,\n          // paddingTop: '3.5rem',\n          paddingTop: '1rem',\n          marginBottom: `0.5rem`,\n          // background: `white`,\n          fontSize: `1rem`,\n        }}\n      >\n        <section>\n          {\n            posts.map((post, idx) => {\n              const { node } = post\n              const title = node.frontmatter.title || node.fields.slug\n              const date = node.frontmatter.date\n              const update = node.frontmatter.update\n              const slug = node.fields.slug\n              const tags = node.frontmatter.tags || []\n              const url = node.frontmatter.url || \"\"\n              const comments = node.frontmatter.comments\n              const timeToRead = node.timeToRead\n\n              return (\n                <CrayonsStory\n                  key={idx}\n                  title={title}\n                  date={date}\n                  update={update}\n                  slug={slug}\n                  tags={tags}\n                  postUrl={url}\n                  comments={comments}\n                  timeToRead={timeToRead}\n                />\n              )\n            })\n          }\n        </section>\n        <section\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-between\",\n            listStyle: \"none\",\n            padding: 0,\n            marginTop: \"2rem\",\n            paddingBottom: '2rem',\n          }}\n        >\n          <div>\n            {currentPage - 1 > 0 && (\n              <Link\n                to={\"/posts/\" + (currentPage - 1 === 1 ? \"\" : currentPage - 1)}\n                rel=\"prev\"\n              >\n                ← 上一页\n              </Link>\n            )}\n          </div>\n          <div>\n            {currentPage + 1 <= totalPage && (\n              <Link to={\"/posts/\" + (currentPage + 1)} rel=\"next\">\n                下一页 →\n              </Link>\n            )}\n          </div>\n        </section>\n      </article>\n    </Layout>\n  )\n}\n\nexport default postsPagination\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        fileAbsolutePath\n      }\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            update(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            url\n            comments\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}